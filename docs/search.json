[{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/FAQ.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Frequently asked questions","text":"Interperting residual variance. general, recommend interpreting fraction variance explained residuals. fraction driven 1) particulars study design, 2) measurement precision (.e. high read counts give precise measurements), 3) biological variability 4) technical variability (.e. batch effects). additional variables explain variation measured gene expression, include order avoid confounding variable interest. particular residual fraction ‘good’ ‘bad’ good metric determining whether variables included.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/FAQ.html","id":"errors-and-warnings","dir":"Articles","previous_headings":"","what":"Errors and warnings","title":"Frequently asked questions","text":"Errors warnings variancePartition mostly designed let user know isssue model. Note warnings errors can overridden specifying suppressWarnings=TRUE dream() showWarnings=FALSE fitExtractVarPartModel() fitVarPartModel(). guide interperting interpreting warnings errors variancePartition dream. Note document can found “1) Tutorial using variancePartition”.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/FAQ.html","id":"current-github-issues","dir":"Articles","previous_headings":"","what":"Current GitHub issues","title":"Frequently asked questions","text":"See GitHub page --date responses users’ questions.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/FAQ.html","id":"warnings","dir":"Articles","previous_headings":"Current GitHub issues","what":"Warnings","title":"Frequently asked questions","text":"Intercept term specified formula:  results behave expected may wrong!! intercept (.e. mean term) must specified order results statistically valid. Otherwise, variance percentages overestimated. Categorical variables modeled fixed effect: results behave expected may wrong!! linear mixed model used, categorical variables must modeled random effect. Alternatively, fixed effect model can used modeling variables fixed. one varying coefficient term:\\newline results behave expected may wrong!! one varying coefficient term can specified. example, formula ~(Tissue+0|Individual) + (Batch+0|Individual) contains two varying coefficient terms results analysis easily interpretable. formula one term like (Tissue+0|Individual) allowed.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/FAQ.html","id":"errors","dir":"Articles","previous_headings":"Current GitHub issues","what":"Errors","title":"Frequently asked questions","text":"Colinear score > .99: Covariates formula strongly correlated parameter estimates model meaningful.  Dropping one covariates fix problem Error asMethod(object) : positive definite matrix vcov.merMod(fit) : Computed variance-covariance matrix problem: positive definite matrix; returning NA matrix fixed-effect model matrix rank deficient dropping 26 columns / coefficients Including variables highly correlated can produce misleading results (see Section “Detecting problems caused collinearity variables”). case, parameter estimates model meaningful. Dropping one covariates fix problem. Error checkNlevels(reTrms$flist, n = n, control): number levels grouping factor must < number observations arises using varying coefficient model examines effect one variable inside subsets data defined another: ~(+0|B). See Section “Variation within multiple subsets data”. must enough observations level variable B level variable . Consider example samples multiple tissues set individual interested variation across individuals within tissue using formula: ~(Tissue+0|Individual). analysis work multiple samples individual least one tissue. tissues one sample per individual, analysis fail variancePartition give error. Problem varying coefficient model formula: form (+0|B) analyzing variation one variable inside another (see Section “Variation within multiple subsets data”.), formula specified (Tissue+0|Individual). error occurs formula contains (Tissue|Individual) instead. fatal error wrapper code Error mcfork() : unable fork, possible reason: allocate memory Error: allocate buffer error occurs fitVarPartModel uses many threads takes much memory. easiest solution use fitExtractVarPartModel instead. Occasionally issue parallel backend control. Using fewer threads restarting R solve problem.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/FAQ.html","id":"errors-problems-removing-samples-with-nananinf-values","dir":"Articles","previous_headings":"Current GitHub issues > Errors","what":"Errors: Problems removing samples with NA/NaN/Inf values","title":"Frequently asked questions","text":"variancePartition fits regression model gene drops samples NA/NaN/Inf values model fit. generally seamless can cause issue variable specified formula longer varies within subset samples retained. Consider example variables sex age age NA males samples. Dropping samples invalid values variables included formula retain female samples. cause variancePartition throw error now variation sex retained subset data. can resolved removing either age sex formula. situtation indicated following errors: Error: grouping factors must > 1 sampled level Error: Invalid grouping factor specification, Individual Error contrasts<-(*tmp*, value = contr.funs[1 + isOF[nn]]): contrasts can applied factors 2 levels Error checkNlevels(reTrms\\$flist, n = n, control): grouping factors must > 1 sampled level","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/FAQ.html","id":"errors-with-biocparallel-multithreading-backend","dir":"Articles","previous_headings":"Current GitHub issues > Errors","what":"Errors with BiocParallel multithreading backend","title":"Frequently asked questions","text":"Error: 'bpiterate' receive data failed: error reading connection Error serialize(data, node$con, xdr = FALSE) : ignoring SIGPIPE signal variancePartition uses BiocParallel package run analysis parallel across multiple cores. issue parallel backend might see errors. often occurs long interactive sessions, manually kill function running parallel. two ways address issue. Global: set number threads smaller number. found reducing number threads reduces chance random failures like . Local: set number theads function call. re-initializes parallel backend address error","code":"library(BiocParallel)  # globally specify that all multithreading using bpiterate from BiocParallel # should use 8 cores register(SnowParam(8)) fitExtractVarPartModel(..., BPPARAM=SnowParam(8))  fitVarPartModel(..., BPPARAM=SnowParam(8))  dream(..., BPPARAM=SnowParam(8))  voomWithDreamWeights(...,BPPARAM=SnowParam(8))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/FAQ.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Frequently asked questions","text":"","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.4 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.2.3/lib/R/lib/libRlapack.dylib;  LAPACK version 3.10.1 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.2       cli_3.6.1         knitr_1.43        rlang_1.1.1       xfun_0.39         ##  [6] stringi_1.7.12    purrr_1.0.1       textshaping_0.3.6 jsonlite_1.8.4    glue_1.6.2        ## [11] rprojroot_2.0.3   htmltools_0.5.5   ragg_1.2.5        sass_0.4.6        rmarkdown_2.21    ## [16] evaluate_0.21     jquerylib_0.1.4   fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3   ## [21] memoise_2.0.1     stringr_1.5.0     compiler_4.3.0    fs_1.6.2          systemfonts_1.0.4 ## [26] digest_0.6.31     R6_2.5.1          magrittr_2.0.3    bslib_0.4.2       tools_4.3.0       ## [31] pkgdown_2.0.7     cachem_1.0.8      desc_1.4.2"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/additional_visualization.html","id":"plot-variance-structure","dir":"Articles","previous_headings":"","what":"Plot variance structure","title":"Additional visualizations of variance structure","text":"","code":"# Fit linear mixed model and examine correlation stucture # for one gene data(varPartData)  form <- ~ Age + (1|Individual) + (1|Tissue)  fitList <- fitVarPartModel( geneExpr[1:2,], form, info )  # focus on one gene fit = fitList[[1]]"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/additional_visualization.html","id":"reorder-samples","dir":"Articles","previous_headings":"Plot variance structure > By Individual","what":"Reorder samples","title":"Additional visualizations of variance structure","text":"","code":"# Figure 1a # correlation structure based on similarity within Individual # reorder samples based on clustering plotCorrStructure( fit, \"Individual\" )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/additional_visualization.html","id":"original-order-of-samples","dir":"Articles","previous_headings":"Plot variance structure > By Individual","what":"Original order of samples","title":"Additional visualizations of variance structure","text":"","code":"# Figure 1b # use original order of samples plotCorrStructure( fit, \"Individual\", reorder=FALSE )"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/additional_visualization.html","id":"reorder-samples-1","dir":"Articles","previous_headings":"Plot variance structure > By Tissue","what":"Reorder samples","title":"Additional visualizations of variance structure","text":"","code":"# Figure 1c # correlation structure based on similarity within Tissue # reorder samples based on clustering plotCorrStructure( fit, \"Tissue\" )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/additional_visualization.html","id":"original-order-of-samples-1","dir":"Articles","previous_headings":"Plot variance structure > By Tissue","what":"Original order of samples","title":"Additional visualizations of variance structure","text":"","code":"# Figure 1d # use original order of samples plotCorrStructure( fit, \"Tissue\", reorder=FALSE )"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/additional_visualization.html","id":"reorder-samples-2","dir":"Articles","previous_headings":"Plot variance structure > By Individual and Tissue","what":"Reorder samples","title":"Additional visualizations of variance structure","text":"","code":"# Figure 2a # correlation structure based on similarity within  # Individual *and* Tissue, reorder samples based on clustering plotCorrStructure( fit )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/additional_visualization.html","id":"original-order-of-samples-2","dir":"Articles","previous_headings":"Plot variance structure > By Individual and Tissue","what":"Original order of samples","title":"Additional visualizations of variance structure","text":"","code":"# Figure 2b # use original order of samples plotCorrStructure( fit, reorder=FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/additional_visualization.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Additional visualizations of variance structure","text":"","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.4 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] variancePartition_1.31.7 BiocParallel_1.34.2      limma_3.56.2             ## [4] ggplot2_3.4.2            knitr_1.43               ##  ## loaded via a namespace (and not attached): ##  [1] gtable_0.3.3        xfun_0.39           bslib_0.4.2         ##  [4] caTools_1.18.2      Biobase_2.60.0      lattice_0.21-8      ##  [7] numDeriv_2016.8-1.1 vctrs_0.6.2         tools_4.3.0         ## [10] Rdpack_2.4          bitops_1.0-7        generics_0.1.3      ## [13] pbkrtest_0.5.2      parallel_4.3.0      tibble_3.2.1        ## [16] fansi_1.0.4         highr_0.10          pkgconfig_2.0.3     ## [19] Matrix_1.5-4.1      KernSmooth_2.23-21  desc_1.4.2          ## [22] lifecycle_1.0.3     compiler_4.3.0      stringr_1.5.0       ## [25] textshaping_0.3.6   gplots_3.1.3        munsell_0.5.0       ## [28] RhpcBLASctl_0.23-42 codetools_0.2-19    lmerTest_3.1-3      ## [31] htmltools_0.5.5     sass_0.4.6          yaml_2.3.7          ## [34] tidyr_1.3.0         nloptr_2.0.3        pillar_1.9.0        ## [37] pkgdown_2.0.7       jquerylib_0.1.4     MASS_7.3-60         ## [40] aod_1.3.2           cachem_1.0.8        iterators_1.0.14    ## [43] boot_1.3-28.1       nlme_3.1-162        gtools_3.9.4        ## [46] tidyselect_1.2.0    digest_0.6.31       mvtnorm_1.2-1       ## [49] stringi_1.7.12      reshape2_1.4.4      dplyr_1.1.2         ## [52] purrr_1.0.1         splines_4.3.0       rprojroot_2.0.3     ## [55] fastmap_1.1.1       grid_4.3.0          colorspace_2.1-0    ## [58] cli_3.6.1           magrittr_2.0.3      utf8_1.2.3          ## [61] broom_1.0.4         corpcor_1.6.10      withr_2.5.0         ## [64] backports_1.4.1     scales_1.2.1        remaCor_0.0.15      ## [67] rmarkdown_2.22      lme4_1.1-33         ragg_1.2.5          ## [70] memoise_2.0.1       evaluate_0.21       EnvStats_2.7.0      ## [73] rbibutils_2.2.13    rlang_1.1.1         Rcpp_1.0.10         ## [76] glue_1.6.2          BiocGenerics_0.46.0 minqa_1.2.5         ## [79] jsonlite_1.8.5      plyr_1.8.8          R6_2.5.1            ## [82] systemfonts_1.0.4   fs_1.6.2"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"standard-rna-seq-processing","dir":"Articles","previous_headings":"","what":"Standard RNA-seq processing","title":"dream","text":"tutorial assumes reader familiar limma/voom workflow RNA-seq. Process raw count data using limma/voom.","code":"library('variancePartition') library('edgeR') library('BiocParallel') data(varPartDEdata)  # filter genes by number of counts isexpr = rowSums(cpm(countMatrix)>0.1) >= 5  # Standard usage of limma/voom dge = DGEList( countMatrix[isexpr,] ) dge = calcNormFactors( dge )  # make this vignette faster by analyzing a subset of genes dge = dge[1:1000,]"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"limma-analysis","dir":"Articles","previous_headings":"","what":"Limma Analysis","title":"dream","text":"Limma built-approach analyzing repeated measures data using duplicateCorrelation(). model can handle single random effect, forces magnitude random effect across genes.","code":"# apply duplicateCorrelation is two rounds design = model.matrix( ~ Disease, metadata) vobj_tmp = voom( dge, design, plot=FALSE) dupcor <- duplicateCorrelation(vobj_tmp,design,block=metadata$Individual)  # run voom considering the duplicateCorrelation results # in order to compute more accurate precision weights # Otherwise, use the results from the first voom run vobj = voom( dge, design, plot=FALSE, block=metadata$Individual, correlation=dupcor$consensus)  # Estimate linear mixed model with a single variance component # Fit the model for each gene,  dupcor <- duplicateCorrelation(vobj, design, block=metadata$Individual)  # But this step uses only the genome-wide average for the random effect fitDupCor <- lmFit(vobj, design, block=metadata$Individual, correlation=dupcor$consensus)  # Fit Empirical Bayes for moderated t-statistics fitDupCor <- eBayes( fitDupCor )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"dream-analysis","dir":"Articles","previous_headings":"","what":"Dream Analysis","title":"dream","text":"dream method replaces 4 core functions limma linear mixed model. voomWithDreamWeights() replaces voom() estimate precision weights dream() replaces lmFit() estimate regression coefficients. variancePartition::eBayes() replaces limma::eBayes() apply empircal Bayes shrinkage linear mixed models. variancePartition::topTable() replaces limma::topTable() give seamless access results dream(). models fixed effects, variancePartition::eBayes(), variancePartition::topTable() work seamlessly give results equivalent limma functions name. user perspective, dream() workflow limma since statistical differences handled behind scenes. Since dream uses estimated degrees freedom value hypothsis test, degrees freedom different gene . Therefore, t-statistics directly comparable since different degrees freedom. order able compare test statistics, report z.std p-value transformed signed z-score. can used downstream analysis. Note random effect specified, dream() automatically uses lmFit(), user must run eBayes() afterward.","code":"# Specify parallel processing parameters # this is used implicitly by dream() to run in parallel param = SnowParam(4, \"SOCK\", progressbar=TRUE)  # The variable to be tested must be a fixed effect form <- ~ Disease + (1|Individual)   # estimate weights using linear mixed model of dream vobjDream = voomWithDreamWeights( dge, form, metadata, BPPARAM=param )  # Fit the dream model on each gene # By default, uses the Satterthwaite approximation for the hypothesis test fitmm = dream( vobjDream, form, metadata ) fitmm = eBayes(fitmm) # Examine design matrix head(fitmm$design, 3) ##           (Intercept) Disease1 ## sample_01           1        0 ## sample_02           1        0 ## sample_03           1        0 # Get results of hypothesis test on coefficients of interest topTable( fitmm, coef='Disease1', number=3 ) ##                                   logFC  AveExpr        t      P.Value    adj.P.Val        B ## ENST00000283033.5 gene=TXNDC11 1.556233 3.567624 32.66731 1.934507e-21 1.934507e-18 38.78853 ## ENST00000257181.9 gene=PRPF38A 1.380549 4.398270 24.57867 1.493752e-18 7.468760e-16 32.48845 ## ENST00000525790.1 gene=TDRKH   1.508341 3.184931 19.32367 3.712012e-16 1.025502e-13 27.06758 ##                                   z.std ## ENST00000283033.5 gene=TXNDC11 9.508490 ## ENST00000257181.9 gene=PRPF38A 8.790139 ## ENST00000525790.1 gene=TDRKH   8.147605"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"using-contrasts-to-compare-coefficients","dir":"Articles","previous_headings":"Dream Analysis > Advanced hypothesis testing","what":"Using contrasts to compare coefficients","title":"dream","text":"can also perform hypothesis test difference two coefficients using contrast matrix. contrasts evaluated time model fit results can extracted topTable(). behaves like makeContrasts() contrasts.fit() limma. Multiple contrasts can evaluated time, order save computation time. Make sure inspect contrast matrix confirm testing intend.","code":"form <- ~ 0 + DiseaseSubtype + Sex + (1|Individual)   L = makeContrastsDream( form, metadata,    contrasts = c(compare2_1 = \"DiseaseSubtype2 - DiseaseSubtype1\",                  compare1_0 = \"DiseaseSubtype1 - DiseaseSubtype0\"))  # Visualize contrast matrix plotContrasts(L) # fit dream model with contrasts fit = dream( vobjDream, form, metadata, L) fit = eBayes(fit)  # get names of available coefficients and contrasts for testing colnames(fit) ## [1] \"compare2_1\"      \"compare1_0\"      \"DiseaseSubtype0\" \"DiseaseSubtype1\" \"DiseaseSubtype2\" ## [6] \"SexM\" # extract results from first contrast topTable( fit, coef=\"compare2_1\", number=3 ) ##                                       logFC  AveExpr         t      P.Value adj.P.Val          B ## ENST00000355624.3 gene=RAB11FIP2 -0.9493146 5.260280 -5.350356 0.0000224728 0.0224728  0.8858852 ## ENST00000593466.1 gene=DDA1      -1.7265710 3.901579 -3.664795 0.0013569332 0.6784666 -1.5402278 ## ENST00000200676.3 gene=CETP       1.4777422 3.723438  3.873141 0.0040308941 0.9994857 -1.8241804 ##                                      z.std ## ENST00000355624.3 gene=RAB11FIP2 -4.238790 ## ENST00000593466.1 gene=DDA1      -3.203659 ## ENST00000200676.3 gene=CETP       2.875734"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"comparing-multiple-coefficients","dir":"Articles","previous_headings":"Dream Analysis > Advanced hypothesis testing","what":"Comparing multiple coefficients","title":"dream","text":"far contrasts involved difference two coefficients. contrasts can also compare linear combination coefficients. , consider comparing DiseaseSubtype0 mean DiseaseSubtype1 DiseaseSubtype2. Note can also customize name contrast.","code":"L2 = makeContrastsDream( form, metadata, contrasts =    c(Test1 = \"DiseaseSubtype0 - (DiseaseSubtype1 + DiseaseSubtype2)/2\"))  plotContrasts(L2) # fit dream model to evaluate contrasts fit = dream( vobjDream[1:10,], form, metadata, L=L2) fit = eBayes(fit)  topTable(fit, coef=\"Test1\", number=3) ##                                     logFC  AveExpr         t      P.Value    adj.P.Val        B ## ENST00000418210.2 gene=TMEM64  -1.0343236 4.715367 -7.000080 3.300023e-07 3.054320e-06 8.484489 ## ENST00000456159.1 gene=MET     -0.9830788 2.458926 -6.062227 6.108639e-07 3.054320e-06 5.836340 ## ENST00000555834.1 gene=RPS6KL1 -0.8954795 5.272063 -5.450341 3.957534e-06 1.319178e-05 3.997352 ##                                    z.std ## ENST00000418210.2 gene=TMEM64  -5.105453 ## ENST00000456159.1 gene=MET     -4.987750 ## ENST00000555834.1 gene=RPS6KL1 -4.613600"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"joint-hypothesis-test-of-multiple-coefficients","dir":"Articles","previous_headings":"Dream Analysis > Advanced hypothesis testing","what":"Joint hypothesis test of multiple coefficients","title":"dream","text":"Joint hypothesis testing multiple coefficients time can performed using F-test. Just like limma, results can extracted using topTable() Since dream uses estimated degrees freedom value hypothsis test, degrees freedom different gene . Therefore, F-statistics directly comparable since different degrees freedom. order able compare test statistics, report F.std p-value transformed F-statistic \\(df_1\\) number coefficients tested \\(df_2=\\infty\\). can used downstream analysis.","code":"# extract results from first contrast topTable( fit, coef=c(\"DiseaseSubtype2\", \"DiseaseSubtype1\"), number=3 ) ##                                DiseaseSubtype2 DiseaseSubtype1  AveExpr        F      P.Value ## ENST00000418210.2 gene=TMEM64         5.301001        5.211674 4.715367 823.4480 3.966577e-23 ## ENST00000555834.1 gene=RPS6KL1        5.662699        5.719196 5.272063 791.4321 6.389688e-23 ## ENST00000589123.1 gene=NFIC           6.545195        6.181023 5.855335 651.9138 6.549307e-22 ##                                   adj.P.Val    F.std ## ENST00000418210.2 gene=TMEM64  3.194844e-22 51.58155 ## ENST00000555834.1 gene=RPS6KL1 3.194844e-22 51.10477 ## ENST00000589123.1 gene=NFIC    2.183102e-21 48.77751"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"small-sample-method","dir":"Articles","previous_headings":"Dream Analysis","what":"Small-sample method","title":"dream","text":"small datasets, Kenward-Roger method can powerful. substantially computationally intensive.","code":"fitmmKR = dream( vobjDream, form, metadata, ddf=\"Kenward-Roger\") fitmmKR = eBayes(fitmmKR)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"variancepartition-plot","dir":"Articles","previous_headings":"Dream Analysis","what":"variancePartition plot","title":"dream","text":"Dream variancePartition share underlying linear mixed model framework. variancePartition analysis can indicate important variables included fixed random effects dream analysis.","code":"# Note: this could be run with either vobj from voom() # or vobjDream from voomWithDreamWeights() # The resuylts are similar form = ~ (1|Individual) + (1|Disease) vp = fitExtractVarPartModel( vobj, form, metadata)  plotVarPart( sortCols(vp))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"comparing-p-values","dir":"Articles","previous_headings":"Dream Analysis","what":"Comparing p-values","title":"dream","text":"compare p-values dream() duplicateCorrelation. order understand empircal difference , can plot \\(-\\log_{10}\\) p-values method.  duplicateCorrelation method estimates single variance term genome-wide even though donor contribution particular gene can vary substantially genome-wide trend. Using single value genome-wide within-donor variance can reduce power increase false positive rate particular, reproducible way. Let \\(\\tau^2_g\\) value donor component gene \\(g\\) \\(\\bar{\\tau}^2\\) genome-wide mean. genes \\(\\tau^2_g>\\bar{\\tau}^2\\), using \\(\\bar{\\tau}^2\\) -corrects donor component increases false positive rate compared using \\(\\tau^2_g\\). Conversely, genes \\(\\tau^2_g<\\bar{\\tau}^2\\), using \\(\\bar{\\tau}^2\\) -corrects donor component decreases power. Increasing sample size overcome issue. dream method overcomes issue using \\(\\tau^2_g\\). , \\(-\\log_{10}\\) p-values methods plotted colored donor contribution estiamted variancePartition. green value indicates \\(\\bar{\\tau}^2\\), red blue indicate higher lower values, respectively. one variance component used contrast matrix simple, effect using dream versus duplicateCorrelation determined comparison \\(\\tau^2_g\\) \\(\\bar{\\tau}^2\\): dream can increase \\(-\\log_{10}\\) p-value genes lower donor component (.e. \\(\\tau^2_g<\\bar{\\tau}^2\\)) decrease \\(-\\log_{10}\\) p-value genes higher donor component (.e. \\(\\tau^2_g>\\bar{\\tau}^2\\)) Note using variance components complicated contrast matrix can make relationship complicated.","code":"# Compare p-values and make plot p1 = topTable(fitDupCor, coef=\"Disease1\", number=Inf, sort.by=\"none\")$P.Value p2 = topTable(fitmm, number=Inf, sort.by=\"none\")$P.Value  plotCompareP( p1, p2, vp$Individual, dupcor$consensus)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"parallel-processing","dir":"Articles","previous_headings":"","what":"Parallel processing","title":"dream","text":"variancePartition functions including dream(), fitExtractVarPartModel() fitVarPartModel() can take advange multicore machines speed analysis. uses BiocParallel package manage parallelization. Specify parameters BPPARAM argument. default BPPARAM = SerialParam().","code":"# Request 4 cores, and enable the progress bar # This is the ideal for Linux, OS X and Windows param = SnowParam(4, \"SOCK\", progressbar=TRUE) fitmm = dream( vobjDream, form, metadata, BPPARAM=param)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/dream.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"dream","text":"<>","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.4 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.2.3/lib/R/lib/libRlapack.dylib;  LAPACK version 3.10.1 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] edgeR_3.42.2             variancePartition_1.31.1 BiocParallel_1.34.2      ## [4] limma_3.56.1             ggplot2_3.4.2            pander_0.6.5             ##  ## loaded via a namespace (and not attached): ##  [1] tidyselect_1.2.0        farver_2.1.1            dplyr_1.1.2             bitops_1.0-7            ##  [5] fastmap_1.1.1           digest_0.6.31           lifecycle_1.0.3         statmod_1.5.0           ##  [9] magrittr_2.0.3          compiler_4.3.0          rlang_1.1.1             sass_0.4.6              ## [13] progress_1.2.2          tools_4.3.0             utf8_1.2.3              yaml_2.3.7              ## [17] knitr_1.43              clusterGeneration_1.3.7 labeling_0.4.2          prettyunits_1.1.1       ## [21] plyr_1.8.8              KernSmooth_2.23-21      withr_2.5.0             purrr_1.0.1             ## [25] numDeriv_2016.8-1.1     BiocGenerics_0.46.0     desc_1.4.2              grid_4.3.0              ## [29] aod_1.3.2               fansi_1.0.4             caTools_1.18.2          colorspace_2.1-0        ## [33] scales_1.2.1            gtools_3.9.4            iterators_1.0.14        MASS_7.3-60             ## [37] mvtnorm_1.1-3           cli_3.6.1               rmarkdown_2.21          crayon_1.5.2            ## [41] ragg_1.2.5              generics_0.1.3          reshape2_1.4.4          RUnit_0.4.32            ## [45] minqa_1.2.5             cachem_1.0.8            stringr_1.5.0           splines_4.3.0           ## [49] parallel_4.3.0          vctrs_0.6.2             boot_1.3-28.1           Matrix_1.5-4.1          ## [53] jsonlite_1.8.4          hms_1.1.3               pbkrtest_0.5.2          systemfonts_1.0.4       ## [57] locfit_1.5-9.7          jquerylib_0.1.4         tidyr_1.3.0             snow_0.4-4              ## [61] glue_1.6.2              pkgdown_2.0.7           nloptr_2.0.3            codetools_0.2-19        ## [65] stringi_1.7.12          gtable_0.3.3            EnvStats_2.7.0          lme4_1.1-33             ## [69] RcppZiggurat_0.1.6      lmerTest_3.1-3          munsell_0.5.0           tibble_3.2.1            ## [73] remaCor_0.0.12          pillar_1.9.0            htmltools_0.5.5         gplots_3.1.3            ## [77] R6_2.5.1                textshaping_0.3.6       Rdpack_2.4              rprojroot_2.0.3         ## [81] evaluate_0.21           lattice_0.21-8          Biobase_2.60.0          highr_0.10              ## [85] rbibutils_2.2.13        backports_1.4.1         Rfast_2.0.7             RhpcBLASctl_0.23-42     ## [89] memoise_2.0.1           broom_1.0.4             corpcor_1.6.10          bslib_0.4.2             ## [93] Rcpp_1.0.10             nlme_3.1-162            xfun_0.39               fs_1.6.2                ## [97] pkgconfig_2.0.3"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/multivariate_tests.html","id":"import-transcript-level-counts","dir":"Articles","previous_headings":"","what":"Import transcript-level counts","title":"Multivariate tests","text":"Read transcript counts package.","code":"library(readr) library(tximport) library(tximportData)  # specify directory path = system.file(\"extdata\", package=\"tximportData\")  # read sample meta-data samples = read.table(file.path(path,\"samples.txt\"), header=TRUE) samples.ext = read.table(file.path(path,\"samples_extended.txt\"), header=TRUE, sep=\"\\t\")  # read assignment of transcripts to genes # remove genes on the PAR, since these are present twice tx2gene = read_csv(file.path(path, \"tx2gene.gencode.v27.csv\")) tx2gene = tx2gene[grep(\"PAR_Y\", tx2gene$GENEID, invert=TRUE),]  # read transcript-level quatifictions files = file.path(path, \"salmon\", samples$run, \"quant.sf.gz\") txi = tximport(files, type = \"salmon\", txOut=TRUE)  # Create metadata simulating two conditions sampleTable = data.frame(condition = factor(rep(c(\"A\", \"B\"), each = 3))) rownames(sampleTable) = paste0(\"Sample\", 1:6)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/multivariate_tests.html","id":"standard-dream-analysis","dir":"Articles","previous_headings":"","what":"Standard dream analysis","title":"Multivariate tests","text":"Perform standard analysis transcript-level","code":"library(variancePartition) library(edgeR)  # Prepare transcript-level reads dge = DGEList(txi$counts) design <- model.matrix(~condition, data = sampleTable) isexpr = filterByExpr(dge, design) dge = dge[isexpr,] dge = calcNormFactors(dge)   # Estimate precision weights vobj = voomWithDreamWeights(dge, ~ condition, sampleTable)  # Fit regression model one transcript at a time fit = dream(vobj, ~ condition, sampleTable) fit = eBayes(fit)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/multivariate_tests.html","id":"multivariate-analysis","dir":"Articles","previous_headings":"","what":"Multivariate analysis","title":"Multivariate tests","text":"Combine transcript-level results gene-level. mapping transcript gene stored list.","code":"# Prepare transcript to gene mapping # keep only transcripts present in vobj # then convert to list with key GENEID and values TXNAMEs keep = tx2gene$TXNAME %in% rownames(vobj) tx2gene.lst = unstack(tx2gene[keep,])  # Run multivariate test on entries in each feature set res = mvTest(fit, vobj, tx2gene.lst, coef=\"conditionB\")  # truncate gene names since they have version numbers # ENST00000498289.5 -> ENST00000498289 res$ID.short = gsub(\"\\\\..+\", \"\", res$ID)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/multivariate_tests.html","id":"gene-set-analysis","dir":"Articles","previous_headings":"","what":"Gene set analysis","title":"Multivariate tests","text":"Perform gene set analysis using gene-level test statistics.","code":"# must have zenith > v1.0.2 library(zenith) library(GSEABase)  gs = get_MSigDB(\"C1\", to=\"ENSEMBL\")  df_gsa = zenithPR_gsa( res$stat, res$ID.short, gs, inter.gene.cor=.05)  head(df_gsa) ##                NGenes Correlation      delta        se     p.less   p.greater     PValue Direction ## M7078_chr2p16      30        0.05  1.4208384 0.5610910 0.99432899 0.005671015 0.01134203        Up ## M14982_chr7p13     26        0.05  1.1335492 0.5777005 0.97512013 0.024879873 0.04975975        Up ## M7314_chr4p14      25        0.05 -1.1344103 0.5825608 0.02575932 0.974240679 0.05151864      Down ## M5824_chr11p13     30        0.05 -1.0120371 0.5612285 0.03568377 0.964316230 0.07136754      Down ## M3783_chr2q37      73        0.05  0.8367603 0.4929617 0.95518099 0.044819012 0.08963802        Up ## M10517_chr4q24     21        0.05 -1.0062435 0.6060832 0.04844305 0.951556955 0.09688609      Down ##                      FDR ## M7078_chr2p16  0.9992274 ## M14982_chr7p13 0.9992274 ## M7314_chr4p14  0.9992274 ## M5824_chr11p13 0.9992274 ## M3783_chr2q37  0.9992274 ## M10517_chr4q24 0.9992274"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/multivariate_tests.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Multivariate tests","text":"<>","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.4 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.2.3/lib/R/lib/libRlapack.dylib;  LAPACK version 3.10.1 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] org.Hs.eg.db_3.17.0      msigdbr_7.5.1            GSEABase_1.62.0          ##  [4] graph_1.78.0             annotate_1.78.0          XML_3.99-0.14            ##  [7] AnnotationDbi_1.62.1     IRanges_2.34.0           S4Vectors_0.38.1         ## [10] Biobase_2.60.0           BiocGenerics_0.46.0      zenith_1.2.0             ## [13] edgeR_3.42.2             variancePartition_1.31.1 BiocParallel_1.34.2      ## [16] limma_3.56.1             ggplot2_3.4.2            tximportData_1.28.0      ## [19] tximport_1.28.0          readr_2.1.4              ##  ## loaded via a namespace (and not attached): ##   [1] jsonlite_1.8.4              magrittr_2.0.3              nloptr_2.0.3                ##   [4] rmarkdown_2.21              fs_1.6.2                    zlibbioc_1.46.0             ##   [7] ragg_1.2.5                  vctrs_0.6.2                 memoise_2.0.1               ##  [10] minqa_1.2.5                 RCurl_1.98-1.12             S4Arrays_1.0.4              ##  [13] htmltools_0.5.5             progress_1.2.2              curl_5.0.0                  ##  [16] broom_1.0.4                 sass_0.4.6                  KernSmooth_2.23-21          ##  [19] bslib_0.4.2                 desc_1.4.2                  pbkrtest_0.5.2              ##  [22] plyr_1.8.8                  cachem_1.0.8                lifecycle_1.0.3             ##  [25] iterators_1.0.14            pkgconfig_2.0.3             Matrix_1.5-4.1              ##  [28] R6_2.5.1                    fastmap_1.1.1               MatrixGenerics_1.12.0       ##  [31] GenomeInfoDbData_1.2.10     rbibutils_2.2.13            digest_0.6.31               ##  [34] numDeriv_2016.8-1.1         colorspace_2.1-0            rprojroot_2.0.3             ##  [37] GenomicRanges_1.52.0        textshaping_0.3.6           RSQLite_2.3.1               ##  [40] filelock_1.0.2              clusterGeneration_1.3.7     RcppZiggurat_0.1.6          ##  [43] fansi_1.0.4                 httr_1.4.6                  compiler_4.3.0              ##  [46] bit64_4.0.5                 aod_1.3.2                   withr_2.5.0                 ##  [49] backports_1.4.1             DBI_1.1.3                   gplots_3.1.3                ##  [52] MASS_7.3-60                 DelayedArray_0.26.3         corpcor_1.6.10              ##  [55] gtools_3.9.4                caTools_1.18.2              tools_4.3.0                 ##  [58] remaCor_0.0.12              glue_1.6.2                  nlme_3.1-162                ##  [61] grid_4.3.0                  reshape2_1.4.4              generics_0.1.3              ##  [64] gtable_0.3.3                tzdb_0.4.0                  tidyr_1.3.0                 ##  [67] hms_1.1.3                   utf8_1.2.3                  XVector_0.40.0              ##  [70] pillar_1.9.0                stringr_1.5.0               babelgene_22.9              ##  [73] vroom_1.6.3                 splines_4.3.0               dplyr_1.1.2                 ##  [76] BiocFileCache_2.8.0         lattice_0.21-8              bit_4.0.5                   ##  [79] tidyselect_1.2.0            locfit_1.5-9.7              Biostrings_2.68.1           ##  [82] knitr_1.43                  SummarizedExperiment_1.30.1 RhpcBLASctl_0.23-42         ##  [85] xfun_0.39                   matrixStats_0.63.0          KEGGgraph_1.60.0            ##  [88] stringi_1.7.12              yaml_2.3.7                  boot_1.3-28.1               ##  [91] evaluate_0.21               codetools_0.2-19            tibble_3.2.1                ##  [94] Rgraphviz_2.44.0            cli_3.6.1                   xtable_1.8-4                ##  [97] systemfonts_1.0.4           Rdpack_2.4                  munsell_0.5.0               ## [100] jquerylib_0.1.4             Rcpp_1.0.10                 GenomeInfoDb_1.36.0         ## [103] EnvStats_2.7.0              dbplyr_2.3.2                png_0.1-8                   ## [106] RUnit_0.4.32                parallel_4.3.0              Rfast_2.0.7                 ## [109] pkgdown_2.0.7               blob_1.2.4                  prettyunits_1.1.1           ## [112] bitops_1.0-7                lme4_1.1-33                 mvtnorm_1.1-3               ## [115] lmerTest_3.1-3              scales_1.2.1                purrr_1.0.1                 ## [118] crayon_1.5.2                rlang_1.1.1                 EnrichmentBrowser_2.30.1    ## [121] KEGGREST_1.40.0"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/mvtests.html","id":"import-transcript-level-counts","dir":"Articles","previous_headings":"","what":"Import transcript-level counts","title":"Multivariate tests","text":"Read transcript counts package.","code":"library(readr) library(tximport) library(tximportData)  # specify directory path = system.file(\"extdata\", package=\"tximportData\")  # read sample meta-data samples = read.table(file.path(path,\"samples.txt\"), header=TRUE) samples.ext = read.table(file.path(path,\"samples_extended.txt\"), header=TRUE, sep=\"\\t\")  # read assignment of transcripts to genes # remove genes on the PAR, since these are present twice tx2gene = read_csv(file.path(path, \"tx2gene.gencode.v27.csv\")) tx2gene = tx2gene[grep(\"PAR_Y\", tx2gene$GENEID, invert=TRUE),]  # read transcript-level quatifictions files = file.path(path, \"salmon\", samples$run, \"quant.sf.gz\") txi = tximport(files, type = \"salmon\", txOut=TRUE)  # Create metadata simulating two conditions sampleTable = data.frame(condition = factor(rep(c(\"A\", \"B\"), each = 3))) rownames(sampleTable) = paste0(\"Sample\", 1:6)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/mvtests.html","id":"standard-dream-analysis","dir":"Articles","previous_headings":"","what":"Standard dream analysis","title":"Multivariate tests","text":"Perform standard analysis transcript-level","code":"library(variancePartition) library(edgeR)  # Prepare transcript-level reads dge = DGEList(txi$counts) design <- model.matrix(~condition, data = sampleTable) isexpr = filterByExpr(dge, design) dge = dge[isexpr,] dge = calcNormFactors(dge)   # Estimate precision weights vobj = voomWithDreamWeights(dge, ~ condition, sampleTable)  # Fit regression model one transcript at a time fit = dream(vobj, ~ condition, sampleTable) fit = eBayes(fit)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/mvtests.html","id":"multivariate-analysis","dir":"Articles","previous_headings":"","what":"Multivariate analysis","title":"Multivariate tests","text":"Combine transcript-level results gene-level. mapping transcript gene stored list.","code":"# Prepare transcript to gene mapping # keep only transcripts present in vobj # then convert to list with key GENEID and values TXNAMEs keep = tx2gene$TXNAME %in% rownames(vobj) tx2gene.lst = unstack(tx2gene[keep,])  # Run multivariate test on entries in each feature set # Default method is \"FE.empirical\", but use \"FE\" here to reduce runtime res = mvTest(fit, vobj, tx2gene.lst, coef=\"conditionB\", method = \"FE\")  # truncate gene names since they have version numbers # ENST00000498289.5 -> ENST00000498289 res$ID.short = gsub(\"\\\\..+\", \"\", res$ID)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/mvtests.html","id":"gene-set-analysis","dir":"Articles","previous_headings":"","what":"Gene set analysis","title":"Multivariate tests","text":"Perform gene set analysis using gene-level test statistics.","code":"# must have zenith > v1.0.2 library(zenith) library(GSEABase)  gs = get_MSigDB(\"C1\", to=\"ENSEMBL\")  df_gsa = zenithPR_gsa( res$stat, res$ID.short, gs, inter.gene.cor=.05)  head(df_gsa) ##                NGenes Correlation      delta        se     p.less   p.greater     PValue Direction ## M7078_chr2p16      30        0.05  1.4208384 0.5610910 0.99432899 0.005671015 0.01134203        Up ## M14982_chr7p13     26        0.05  1.1335492 0.5777005 0.97512013 0.024879873 0.04975975        Up ## M7314_chr4p14      25        0.05 -1.1344103 0.5825608 0.02575932 0.974240679 0.05151864      Down ## M5824_chr11p13     30        0.05 -1.0120371 0.5612285 0.03568377 0.964316230 0.07136754      Down ## M3783_chr2q37      73        0.05  0.8367603 0.4929617 0.95518099 0.044819012 0.08963802        Up ## M10517_chr4q24     21        0.05 -1.0062435 0.6060832 0.04844305 0.951556955 0.09688609      Down ##                      FDR ## M7078_chr2p16  0.9992274 ## M14982_chr7p13 0.9992274 ## M7314_chr4p14  0.9992274 ## M5824_chr11p13 0.9992274 ## M3783_chr2q37  0.9992274 ## M10517_chr4q24 0.9992274"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/mvtests.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Multivariate tests","text":"<>","code":"## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.4 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] org.Hs.eg.db_3.17.0      msigdbr_7.5.1            GSEABase_1.62.0          ##  [4] graph_1.78.0             annotate_1.78.0          XML_3.99-0.14            ##  [7] AnnotationDbi_1.62.1     IRanges_2.34.0           S4Vectors_0.38.1         ## [10] Biobase_2.60.0           BiocGenerics_0.46.0      zenith_1.2.0             ## [13] edgeR_3.42.4             variancePartition_1.31.7 BiocParallel_1.34.2      ## [16] limma_3.56.2             ggplot2_3.4.2            tximportData_1.28.0      ## [19] tximport_1.28.0          readr_2.1.4              ##  ## loaded via a namespace (and not attached): ##   [1] jsonlite_1.8.5              magrittr_2.0.3              nloptr_2.0.3                ##   [4] rmarkdown_2.22              fs_1.6.2                    zlibbioc_1.46.0             ##   [7] ragg_1.2.5                  vctrs_0.6.2                 memoise_2.0.1               ##  [10] minqa_1.2.5                 RCurl_1.98-1.12             htmltools_0.5.5             ##  [13] S4Arrays_1.0.4              progress_1.2.2              curl_5.0.0                  ##  [16] broom_1.0.4                 sass_0.4.6                  KernSmooth_2.23-21          ##  [19] bslib_0.4.2                 desc_1.4.2                  pbkrtest_0.5.2              ##  [22] plyr_1.8.8                  cachem_1.0.8                lifecycle_1.0.3             ##  [25] iterators_1.0.14            pkgconfig_2.0.3             Matrix_1.5-4.1              ##  [28] R6_2.5.1                    fastmap_1.1.1               GenomeInfoDbData_1.2.10     ##  [31] rbibutils_2.2.13            MatrixGenerics_1.12.0       digest_0.6.31               ##  [34] numDeriv_2016.8-1.1         colorspace_2.1-0            rprojroot_2.0.3             ##  [37] textshaping_0.3.6           GenomicRanges_1.52.0        RSQLite_2.3.1               ##  [40] filelock_1.0.2              RcppZiggurat_0.1.6          fansi_1.0.4                 ##  [43] httr_1.4.6                  compiler_4.3.0              bit64_4.0.5                 ##  [46] aod_1.3.2                   withr_2.5.0                 backports_1.4.1             ##  [49] DBI_1.1.3                   gplots_3.1.3                MASS_7.3-60                 ##  [52] DelayedArray_0.26.3         corpcor_1.6.10              gtools_3.9.4                ##  [55] caTools_1.18.2              tools_4.3.0                 remaCor_0.0.15              ##  [58] glue_1.6.2                  nlme_3.1-162                grid_4.3.0                  ##  [61] reshape2_1.4.4              generics_0.1.3              gtable_0.3.3                ##  [64] tzdb_0.4.0                  tidyr_1.3.0                 hms_1.1.3                   ##  [67] utf8_1.2.3                  XVector_0.40.0              pillar_1.9.0                ##  [70] stringr_1.5.0               babelgene_22.9              vroom_1.6.3                 ##  [73] splines_4.3.0               dplyr_1.1.2                 BiocFileCache_2.8.0         ##  [76] lattice_0.21-8              bit_4.0.5                   tidyselect_1.2.0            ##  [79] locfit_1.5-9.7              Biostrings_2.68.1           knitr_1.43                  ##  [82] SummarizedExperiment_1.30.1 RhpcBLASctl_0.23-42         xfun_0.39                   ##  [85] matrixStats_1.0.0           KEGGgraph_1.60.0            stringi_1.7.12              ##  [88] yaml_2.3.7                  boot_1.3-28.1               evaluate_0.21               ##  [91] codetools_0.2-19            tibble_3.2.1                Rgraphviz_2.44.0            ##  [94] cli_3.6.1                   xtable_1.8-4                systemfonts_1.0.4           ##  [97] Rdpack_2.4                  munsell_0.5.0               jquerylib_0.1.4             ## [100] Rcpp_1.0.10                 GenomeInfoDb_1.36.0         EnvStats_2.7.0              ## [103] dbplyr_2.3.2                png_0.1-8                   Rfast_2.0.7                 ## [106] parallel_4.3.0              pkgdown_2.0.7               blob_1.2.4                  ## [109] prettyunits_1.1.1           bitops_1.0-7                lme4_1.1-33                 ## [112] mvtnorm_1.2-1               lmerTest_3.1-3              scales_1.2.1                ## [115] purrr_1.0.1                 crayon_1.5.2                rlang_1.1.1                 ## [118] EnrichmentBrowser_2.30.1    KEGGREST_1.40.0"},{"path":[]},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/rnd_effects.html","id":"estimating-contributions-to-expression-variation","dir":"Articles","previous_headings":"variancePartition","what":"Estimating contributions to expression variation","title":"Theory and practice of random effects and REML","text":"traditional statistics biostatistics, strong distinction modeling categorical variants fixed random effects. Random effects correspond sample units larger population, fixed effects correspond properties specific individuals. Random effects typically treated nuisance variables integrated , hypothesis testing performed fixed effect. r2glmm package fits traditional framework, computing variance fractions given fixed effect : \\[\\begin{eqnarray} \\sigma^2_{fixed}/ \\left(\\sigma^2_{fixed} + \\sigma^2_{error}\\right) \\end{eqnarray}\\] Importantly, random effects denominator. fraction determined fixed effects residuals. experience bioinformatics, problem. Making distinctions fixed random effects seemed arbitrary. Variance phenotype due age (fixed) variation across subject (random). Including variables denominator produced intuitive results 1) variance fractions sum one across components 2) fixed random effects interpreted scale 3) fractions compared across studies different designs, 4) estimates variance fractions accurate. variancePartition fractions defined : \\[\\begin{eqnarray} \\sigma^2_{X}/ \\left(\\sigma^2_{fixed} + \\sigma^2_{random} + \\sigma^2_{error}\\right) \\end{eqnarray}\\] just plugging variable numerator. Thus faction evaluated variancePartition different r2glmm definition. code explicitly demonstrating difference: formulas different. require categorical variables random effects? practical level, categorical variables many levels problematic. Using categorical variable 200 categories fixed effect statistically unstable. many degrees freedom variable absorb lot variance even null. Statistically, estimating variance fraction variable many categories can biased variable fixed effect. Therefore, variancePartition requires categorical variables random effects. Modeling variable random effect produces unbiased estimates variance fractions practice. See simulations Supplement (section 1.5) Hoffman Schadt (2016). distinction fixed random effects important formulation affects variables put denominator. choosing model variable fixed versus random effect definitely change estimated fraction. Yet variancePartition formulation, variables denominator isn`t affected fixed/random decision. Moreover, using random effect empirically reduces bias estimated fraction. Finally, use maximum likelihood estimate paramters instead default REML ()? Maximum likelihood fits parameters jointly estimates fixed random effects together. essential want compare fixed random effects later. Conversely, REML estimates random effects removing fixed effects response estimation. implicitly removes fixed effects denominator evaluating variance fraction. REML treats fixed effects nuisance variables, variancePartition considers fixed effects core part analysis. REML produced unbiased estimates variance components, goal variancePartition estimate variance fractions fixed random effects jointly. simulations Supplement (section 1.5) Hoffman Schadt (2016), REML produced biased estimates variance fractions maximum likelihood estimates unbiased.","code":"library('variancePartition') library('lme4') library('r2glmm')  set.seed(1)  N = 1000 beta = 3 alpha = c(1, 5, 7)  # generate 1 fixed variable and 1 random variable with 3 levels data = data.frame(X=rnorm(N), Subject = sample(c('A', 'B', 'C'), 100, replace=TRUE))  # simulate variable # y = X\\beta + Subject\\alpha + \\sigma^2 data$y = data$X*beta + model.matrix(~ data$Subject) %*% alpha  + rnorm(N, 0, 1)  # fit model fit = lmer( y ~ X +(1|Subject), data, REML=FALSE)  # calculate variance fraction using variancePartition # include the total sum in the denominator frac = calcVarPart(fit) frac Subject         X Residuals     0.4505    0.4952    0.0543 # the variance fraction excluding the random effect from the denominator # is the same as from r2glmm frac[['X']] / (frac[['X']] + frac[['Residuals']]) [1] 0.901 # using r2glmm r2beta(fit) Effect   Rsq upper.CL lower.CL 1  Model 0.896    0.904    0.886 2      X 0.896    0.904    0.886"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/rnd_effects.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"dream","what":"Hypothesis testing","title":"Theory and practice of random effects and REML","text":"dream also based linear mixed model, goal analysis perform hypothesis testing fixed effects. Random effects treated nuisance variables integrated , approximate null distribution t- F-statistic constructed model fit. Since goal analysis different, consideration using REML versus ML different . required called , can used either . Since Kenward-Roger method gave best power accurate control false positive rate simulations, since Satterthwaite method gives p-values slightly closer Kenward-Roger p-values, set default.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/rnd_effects.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Theory and practice of random effects and REML","text":"","code":"R version 4.3.0 (2023-04-21) Platform: x86_64-apple-darwin22.4.0 (64-bit) Running under: macOS Ventura 13.4  Matrix products: default BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0  locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8  time zone: America/New_York tzcode source: internal  attached base packages: [1] stats     graphics  grDevices utils     datasets  methods   base       other attached packages: [1] knitr_1.43  loaded via a namespace (and not attached):  [1] vctrs_0.6.2       cli_3.6.1         rlang_1.1.1       xfun_0.39          [5] stringi_1.7.12    purrr_1.0.1       textshaping_0.3.6 jsonlite_1.8.5     [9] glue_1.6.2        rprojroot_2.0.3   htmltools_0.5.5   ragg_1.2.5        [13] sass_0.4.6        rmarkdown_2.22    evaluate_0.21     jquerylib_0.1.4   [17] fastmap_1.1.1     yaml_2.3.7        lifecycle_1.0.3   memoise_2.0.1     [21] stringr_1.5.0     compiler_4.3.0    fs_1.6.2          systemfonts_1.0.4 [25] digest_0.6.31     R6_2.5.1          magrittr_2.0.3    bslib_0.4.2       [29] tools_4.3.0       pkgdown_2.0.7     cachem_1.0.8      desc_1.4.2"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/theory_practice_random_effects.html","id":"estimating-contributions-to-expression-variation","dir":"Articles","previous_headings":"variancePartition","what":"Estimating contributions to expression variation","title":"Theory and practice of random effects and REML","text":"traditional statistics biostatistics, strong distinction modeling categorical variants fixed random effects. Random effects correspond sample units larger population, fixed effects correspond properties specific individuals. Random effects typically treated nuisance variables integrated , hypothesis testing performed fixed effect. r2glmm package fits traditional framework, computing variance fractions given fixed effect : \\[\\begin{eqnarray} \\sigma^2_{fixed}/ \\left(\\sigma^2_{fixed} + \\sigma^2_{error}\\right) \\end{eqnarray}\\] Importantly, random effects denominator. fraction determined fixed effects residuals. experience bioinformatics, problem. Making distinctions fixed random effects seemed arbitrary. Variance phenotype due age (fixed) variation across subject (random). Including variables denominator produced intuitive results 1) variance fractions sum one across components 2) fixed random effects interpreted scale 3) fractions compared across studies different designs, 4) estimates variance fractions accurate. variancePartition fractions defined : \\[\\begin{eqnarray} \\sigma^2_{X}/ \\left(\\sigma^2_{fixed} + \\sigma^2_{random} + \\sigma^2_{error}\\right) \\end{eqnarray}\\] just plugging variable numerator. Thus faction evaluated variancePartition different r2glmm definition. code explicitly demonstrating difference: formulas different. require categorical variables random effects? practical level, categorical variables many levels problematic. Using categorical variable 200 categories fixed effect statistically unstable. many degrees freedom variable absorb lot variance even null. Statistically, estimating variance fraction variable many categories can biased variable fixed effect. Therefore, variancePartition requires categorical variables random effects. Modeling variable random effect produces unbiased estimates variance fractions practice. See simulations Supplement (section 1.5) Hoffman Schadt (2016). distinction fixed random effects important formulation affects variables put denominator. choosing model variable fixed versus random effect definitely change estimated fraction. Yet variancePartition formulation, variables denominator isn`t affected fixed/random decision. Moreover, using random effect empirically reduces bias estimated fraction. Finally, use maximum likelihood estimate paramters instead default REML ()? Maximum likelihood fits parameters jointly estimates fixed random effects together. essential want compare fixed random effects later. Conversely, REML estimates random effects removing fixed effects response estimation. implicitly removes fixed effects denominator evaluating variance fraction. REML treats fixed effects nuisance variables, variancePartition considers fixed effects core part analysis. REML produced unbiased estimates variance components, goal variancePartition estimate variance fractions fixed random effects jointly. simulations Supplement (section 1.5) Hoffman Schadt (2016), REML produced biased estimates variance fractions maximum likelihood estimates unbiased.","code":"library('variancePartition') library('lme4') library('r2glmm')  set.seed(1)  N = 1000 beta = 3 alpha = c(1, 5, 7)  # generate 1 fixed variable and 1 random variable with 3 levels data = data.frame(X=rnorm(N), Subject = sample(c('A', 'B', 'C'), 100, replace=TRUE))  # simulate variable # y = X\\beta + Subject\\alpha + \\sigma^2 data$y = data$X*beta + model.matrix(~ data$Subject) %*% alpha  + rnorm(N, 0, 1)  # fit model fit = lmer( y ~ X +(1|Subject), data, REML=FALSE)  # calculate variance fraction using variancePartition # include the total sum in the denominator frac = calcVarPart(fit) frac Subject         X Residuals     0.4505    0.4952    0.0543 # the variance fraction excluding the random effect from the denominator # is the same as from r2glmm frac[['X']] / (frac[['X']] + frac[['Residuals']]) [1] 0.901 # using r2glmm r2beta(fit) Effect   Rsq upper.CL lower.CL 1  Model 0.896    0.904    0.886 2      X 0.896    0.904    0.886"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/theory_practice_random_effects.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"dream","what":"Hypothesis testing","title":"Theory and practice of random effects and REML","text":"dream also based linear mixed model, goal analysis perform hypothesis testing fixed effects. Random effects treated nuisance variables integrated , approximate null distribution t- F-statistic constructed model fit. Since goal analysis different, consideration using REML versus ML different . required called , can used either . Since Kenward-Roger method gave best power accurate control false positive rate simulations, since Satterthwaite method gives p-values slightly closer Kenward-Roger p-values, set default.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/articles/theory_practice_random_effects.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Theory and practice of random effects and REML","text":"","code":"R version 4.3.0 (2023-04-21) Platform: x86_64-apple-darwin22.4.0 (64-bit) Running under: macOS Ventura 13.4  Matrix products: default BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  LAPACK: /usr/local/Cellar/r/4.2.3/lib/R/lib/libRlapack.dylib;  LAPACK version 3.10.1  locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8  time zone: America/New_York tzcode source: internal  attached base packages: [1] stats     graphics  grDevices utils     datasets  methods   base       other attached packages: [1] r2glmm_0.1.2             lme4_1.1-33              Matrix_1.5-4.1           [4] variancePartition_1.31.1 BiocParallel_1.34.2      limma_3.56.1             [7] ggplot2_3.4.2            knitr_1.43                loaded via a namespace (and not attached):  [1] tidyselect_1.2.0        dplyr_1.1.2             bitops_1.0-7             [4] fastmap_1.1.1           digest_0.6.31           lifecycle_1.0.3          [7] magrittr_2.0.3          compiler_4.3.0          rlang_1.1.1             [10] sass_0.4.6              progress_1.2.2          tools_4.3.0             [13] utf8_1.2.3              yaml_2.3.7              clusterGeneration_1.3.7 [16] prettyunits_1.1.1       plyr_1.8.8              KernSmooth_2.23-21      [19] withr_2.5.0             purrr_1.0.1             numDeriv_2016.8-1.1     [22] BiocGenerics_0.46.0     desc_1.4.2              grid_4.3.0              [25] aod_1.3.2               fansi_1.0.4             caTools_1.18.2          [28] colorspace_2.1-0        scales_1.2.1            gtools_3.9.4            [31] iterators_1.0.14        MASS_7.3-60             cli_3.6.1               [34] mvtnorm_1.1-3           rmarkdown_2.21          crayon_1.5.2            [37] ragg_1.2.5              generics_0.1.3          reshape2_1.4.4          [40] RUnit_0.4.32            minqa_1.2.5             cachem_1.0.8            [43] stringr_1.5.0           splines_4.3.0           parallel_4.3.0          [46] vctrs_0.6.2             boot_1.3-28.1           jsonlite_1.8.4          [49] hms_1.1.3               pbkrtest_0.5.2          systemfonts_1.0.4       [52] jquerylib_0.1.4         tidyr_1.3.0             glue_1.6.2              [55] pkgdown_2.0.7           nloptr_2.0.3            codetools_0.2-19        [58] stringi_1.7.12          gtable_0.3.3            EnvStats_2.7.0          [61] RcppZiggurat_0.1.6      lmerTest_3.1-3          munsell_0.5.0           [64] tibble_3.2.1            remaCor_0.0.12          pillar_1.9.0            [67] htmltools_0.5.5         gplots_3.1.3            R6_2.5.1                [70] textshaping_0.3.6       Rdpack_2.4              rprojroot_2.0.3         [73] evaluate_0.21           lattice_0.21-8          Biobase_2.60.0          [76] rbibutils_2.2.13        backports_1.4.1         Rfast_2.0.7             [79] RhpcBLASctl_0.23-42     memoise_2.0.1           broom_1.0.4             [82] corpcor_1.6.10          bslib_0.4.2             Rcpp_1.0.10             [85] nlme_3.1-162            xfun_0.39               fs_1.6.2                [88] pkgconfig_2.0.3"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hoffman GE, Schadt EE (2016). variancePartition: Interpreting drivers variation complex gene expression studies. BMC Bioinformatics, 17:483, doi:10.1186/s12859-016-1323-z Hoffman GE, Roussos P (2021). dream: Powerful differential expression analysis repeated measures designs. Bioinformatics, 37(2):192-201, doi:10.1093/bioinformatics/btaa687 Hoffman GE, et al. (2023) Efficient differential expression analysis large-scale single cell transcriptomics data using dreamlet. bioRxiv doi:10.1101/2023.03.17.533005","code":"@Article{,   title = {variancePartition: Interpreting drivers of variation in complex gene expression studies},   author = {Gabriel E. Hoffman and Eric E. Schadt},   year = {2016},   journal = {BMC Bioinformatics},   doi = {10.1186/s12859-016-1323-z},   volume = {17},   issue = {483}, } @Article{,   title = {dream: Powerful differential expression analysis for repeated measures designs},   author = {Gabriel E. Hoffman and Panos Roussos},   year = {2020},   journal = {Bioinformatics},   doi = {10.1093/bioinformatics/btaa687}, } @Article{,   title = {Efficient differential expression analysis of large-scale single cell transcriptomics data using dreamlet},   author = {Gabriel E. Hoffman and et al.},   year = {2023},   journal = {bioRxiv},   doi = {10.1101/2023.03.17.533005}, }"},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/index.html","id":"update","dir":"","previous_headings":"","what":"Update","title":"Quantify and interpret drivers of variation in multilevel gene expression experiments","text":"variancePartition 1.31.1 includes major rewrite backend better bug handling. See Changelog. Importantly, new version compatible emprical Bayes moderated t-statistics linear mixed models using eBayes().","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/index.html","id":"latest-features-from-github","dir":"","previous_headings":"Installation","what":"Latest features from GitHub","title":"Quantify and interpret drivers of variation in multilevel gene expression experiments","text":"","code":"devtools::install_github(\"DiseaseNeuroGenomics/variancePartition\")"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/index.html","id":"stable-release-from-bioconductor","dir":"","previous_headings":"Installation","what":"Stable release from Bioconductor","title":"Quantify and interpret drivers of variation in multilevel gene expression experiments","text":"","code":"BiocManager::install(\"variancePartition\")"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"Quantify and interpret drivers of variation in multilevel gene expression experiments","text":"developmental version. stable release see Bioconductor version. questions specifying contrasts dream, see examples . See frequently asked questions. See repo examples paper.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/index.html","id":"reporting-bugs","dir":"","previous_headings":"","what":"Reporting bugs","title":"Quantify and interpret drivers of variation in multilevel gene expression experiments","text":"Please help speed bug fixes providing ‘minimal reproducible example’ starts new R session. recommend reprex package produce GitHub-ready example reproducable fresh R session.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Quantify and interpret drivers of variation in multilevel gene expression experiments","text":"Describes extensions dream including two-stage precision weights empirical Bayes moderated t-statistics linear mixed models Hoffman, et al, biorxiv (2023) Describes dream differential expression: Hoffman Roussos, Bioinformatics (2021) Describes variancePartition package: Hoffman Schadt, BMC Bioinformatics (2016)","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ESS-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Effective sample size — ESS","title":"Effective sample size — ESS","text":"Compute effective sample size based correlation structure linear mixed model","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ESS-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Effective sample size — ESS","text":"","code":"ESS(fit, method = \"full\")  # S4 method for lmerMod ESS(fit, method = \"full\")"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ESS-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Effective sample size — ESS","text":"fit model fit lmer() method \"full\" uses full correlation structure model. \"approximate\" method makes simplifying assumption study mean m samples k groups, computes m based study design.  study design evenly balanced (.e. assumption met), gives results \"full\" method.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ESS-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Effective sample size — ESS","text":"effective sample size random effect model","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ESS-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Effective sample size — ESS","text":"Effective sample size calculations based : Liu, G., Liang, K. Y. (1997). Sample size calculations studies correlated observations. Biometrics, 53(3), 937-47. \"full\" method: $$V_x = var(Y;x)$$ variance-covariance matrix Y, response, based covariate x, effective sample size corresponding covariate $$\\Sigma_{,j} (V_x^{-1})_{,j}$$.  R notation, : sum(solve(V_x)).  practice, can evaluted sum(w), R \"approximate\" method: Letting m mean number samples per group, $$k$$ number groups, $$\\rho$$ intraclass correlation, effective sample size $$mk / (1+\\rho(m-1))$$ Note values equal exactly m samples group.  m average approximation.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ESS-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Effective sample size — ESS","text":"","code":"library(lme4) #> Loading required package: Matrix data(varPartData)  # Linear mixed model fit <- lmer( geneExpr[1,] ~ (1|Individual) + (1|Tissue) + Age, info)  # Effective sample size ESS( fit ) #> Individual     Tissue  #>   27.24628   53.67295"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/FMT-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class FMT — FMT-class","title":"Class FMT — FMT-class","text":"Class FMT","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/FMT.ZI.html","id":null,"dir":"Reference","previous_headings":"","what":"Fully moderated t-test for zero-inflated variances — FMT.ZI","title":"Fully moderated t-test for zero-inflated variances — FMT.ZI","text":"Fully moderated t-test zero-inflated variances","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/FMT.ZI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fully moderated t-test for zero-inflated variances — FMT.ZI","text":"","code":"FMT.ZI(   Amean,   sigmasq,   df,   span1 = 0.5,   span2 = 0.95,   iter1 = 4,   iter2 = 4,   b = 20,   sigma.thres = 1e-07 )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/FMT.ZI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fully moderated t-test for zero-inflated variances — FMT.ZI","text":"Amean average log intensity levels genes sigmasq residual variances genes df degrees freedom variance component span1 span parameter LOESS smoothing function span2 span parameter LOESS smoothing function iter1 iteration number LOESS smoothing function iter2 iteration number LOESS smoothing function b number genes either side moving average window calculating variance log residual variances sigma.thres threshold variance zero","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/FMT.html","id":null,"dir":"Reference","previous_headings":"","what":"Fully moderated t-test — FMT","title":"Fully moderated t-test — FMT","text":"Fully moderated t-test","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/FMT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fully moderated t-test — FMT","text":"","code":"FMT(   Amean,   sigmasq,   df,   span1 = 0.5,   span2 = 0.95,   iter1 = 4,   iter2 = 4,   b = 20 )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/FMT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fully moderated t-test — FMT","text":"Amean average log intensity levels genes sigmasq residual variances genes df degrees freedom sigmasq span1 span parameter LOESS smoothing function span2 span parameter LOESS smoothing function iter1 iteration number LOESS smoothing function iter2 iteration number LOESS smoothing function b number genes either side moving average window calculating variance log residual variances","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/MArrayLM2-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class MArrayLM2 — MArrayLM2-class","title":"Class MArrayLM2 — MArrayLM2-class","text":"Class MArrayLM2","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/VarParCIList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class VarParCIList — VarParCIList-class","title":"Class VarParCIList — VarParCIList-class","text":"Class VarParCIList","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/VarParFitList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class VarParFitList — VarParFitList-class","title":"Class VarParFitList — VarParFitList-class","text":"Class VarParFitList","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/applyQualityWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply pre-specified sample weights — applyQualityWeights","title":"Apply pre-specified sample weights — applyQualityWeights","text":"Apply pre-specified sample weights scaling existing precision weights","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/applyQualityWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply pre-specified sample weights — applyQualityWeights","text":"","code":"applyQualityWeights(vobj, weights)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/applyQualityWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply pre-specified sample weights — applyQualityWeights","text":"vobj EList voom voomWithDreamWeights. weights sample level weights","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/applyQualityWeights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply pre-specified sample weights — applyQualityWeights","text":"Apply pre-specified sample-level weights existing precision weights estimated data.  limma::voomWithQualityWeights function Lui et al. (2015) estimates sample-level weights voom fit, weights fixed beforehand.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/applyQualityWeights.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Apply pre-specified sample weights — applyQualityWeights","text":"Liu R, Holik AZ, Su S, Jansz N, Chen K, Leong HS, Blewitt , Asselin-Labat M, Smyth GK, Ritchie (2015). “weight? Modelling sample observational level variability improves power RNA-seq analyses.” Nucleic acids research, 43(15), e97--e97.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.data.frame.varPartResults.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to data.frame — as.data.frame.varPartResults","title":"Convert to data.frame — as.data.frame.varPartResults","text":"Convert varPartResults data.frame","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.data.frame.varPartResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to data.frame — as.data.frame.varPartResults","text":"","code":"# S3 method for varPartResults as.data.frame(x, row.names = NULL, optional = FALSE, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.data.frame.varPartResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to data.frame — as.data.frame.varPartResults","text":"x varPartResults row.names pass thru generic optional pass thru generic ... arguments.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.data.frame.varPartResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to data.frame — as.data.frame.varPartResults","text":"data.frame","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.data.frame.varPartResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to data.frame — as.data.frame.varPartResults","text":"","code":"# load library # library(variancePartition)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   # Fit model varPart <- fitExtractVarPartModel( geneExpr[1:5,], form, info )  # convert to matrix as.data.frame(varPart) #>       Individual     Tissue          Age  Residuals #> gene1  0.8903138 0.02468003 4.354754e-05 0.08496264 #> gene2  0.8060304 0.10102037 3.336677e-04 0.09261554 #> gene3  0.8899197 0.03630077 1.374663e-03 0.07240486 #> gene4  0.7688278 0.12531358 1.014413e-03 0.10484420 #> gene5  0.6997239 0.20910172 3.871483e-05 0.09113566"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.matrix-varPartResults-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to matrix — as.matrix,varPartResults-method","title":"Convert to matrix — as.matrix,varPartResults-method","text":"Convert varPartResults matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.matrix-varPartResults-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to matrix — as.matrix,varPartResults-method","text":"","code":"# S4 method for varPartResults as.matrix(x, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.matrix-varPartResults-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to matrix — as.matrix,varPartResults-method","text":"x varPartResults ... arguments.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.matrix-varPartResults-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to matrix — as.matrix,varPartResults-method","text":"matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/as.matrix-varPartResults-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to matrix — as.matrix,varPartResults-method","text":"","code":"# load library # library(variancePartition)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   # Fit model varPart <- fitExtractVarPartModel( geneExpr[1:5,], form, info )  # convert to matrix as.matrix(varPart) #>       Individual     Tissue          Age  Residuals #> gene1  0.8903138 0.02468003 4.354754e-05 0.08496264 #> gene2  0.8060304 0.10102037 3.336677e-04 0.09261554 #> gene3  0.8899197 0.03630077 1.374663e-03 0.07240486 #> gene4  0.7688278 0.12531358 1.014413e-03 0.10484420 #> gene5  0.6997239 0.20910172 3.871483e-05 0.09113566"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/calcVarPart-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute variance statistics — calcVarPart","title":"Compute variance statistics — calcVarPart","text":"Compute fraction variation attributable variable regression model.  Also interpretable intra-class correlation correcting variables model.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/calcVarPart-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute variance statistics — calcVarPart","text":"","code":"calcVarPart(fit, returnFractions = TRUE, ...)  # S4 method for lm calcVarPart(fit, returnFractions = TRUE, ...)  # S4 method for lmerMod calcVarPart(fit, returnFractions = TRUE, ...)  # S4 method for glm calcVarPart(fit, returnFractions = TRUE, ...)  # S4 method for negbin calcVarPart(fit, returnFractions = TRUE, ...)  # S4 method for glmerMod calcVarPart(fit, returnFractions = TRUE, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/calcVarPart-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute variance statistics — calcVarPart","text":"fit model fit lm() lmer() returnFractions default: TRUE.  TRUE return fractions sum 1.  Else return unscaled variance components. ... additional arguments (currently used)","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/calcVarPart-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute variance statistics — calcVarPart","text":"fraction variance explained / ICC variable regression model","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/calcVarPart-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute variance statistics — calcVarPart","text":"linear model, variance fractions computed based sum squares explained component.  linear mixed model, variance fractions computed variance component estimates random effects sum squares fixed effects. generalized linear model, variance fraction also includes contribution link function fractions reported linear (.e. link) scale rather observed (.e. response) scale. linear regression identity link, fractions scales.  logit probit links, fractions well defined observed scale due transformation imposed link function. variance implied link function variance corresponding distribution: logit -> logistic distribution -> variance pi^2/3 probit -> standard normal distribution -> variance 1 Poisson distribution rate \\(\\lambda\\), variance \\(log(1 + 1/\\lambda)\\). negative binomial distribution rate \\(\\lambda\\) shape \\(\\theta\\), variance \\(log(1 + 1/\\lambda + 1/\\theta)\\). Variance decomposition reviewed Nakagawa Schielzeth (2012), expanded GLMs Nakagawa, Johnson Schielzeth (2017).  See McKelvey Zavoina (1975) early work applying GLMs.  Also see DeMaris (2002) note Nagelkerke's pseudo R^2 evaluates variance explained full model.  Instead, variance partitioning approach evaluates variance explained term model, sum systematic plus random term sums 1 (Hoffman Schadt, 2016; Nakagawa Schielzeth, 2012).","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/calcVarPart-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute variance statistics — calcVarPart","text":"Nakagawa S, Johnson PC, Schielzeth H (2017). “coefficient determination R 2 intra-class correlation coefficient generalized linear mixed-effects models revisited expanded.” Journal Royal Society Interface, 14(134), 20170213.  Nakagawa S, Schielzeth H (2013). “general simple method obtaining R2 generalized linear mixed-effects models.” Methods ecology evolution, 4(2), 133--142.  McKelvey RD, Zavoina W (1975). “statistical model analysis ordinal level dependent variables.” Journal mathematical sociology, 4(1), 103--120.  DeMaris (2002). “Explained variance logistic regression: Monte Carlo study proposed measures.” Sociological Methods & Research, 31(1), 27--74.  Hoffman GE, Schadt EE (2016). “variancePartition: interpreting drivers variation complex gene expression studies.” BMC bioinformatics, 17(1), 1--13.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/calcVarPart-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute variance statistics — calcVarPart","text":"","code":"library(lme4) data(varPartData)  # Linear mixed model fit <- lmer( geneExpr[1,] ~ (1|Tissue) + Age, info) calcVarPart( fit ) #>     Tissue        Age  Residuals  #> 0.08672790 0.00093212 0.91233998   # Linear model # Note that the two models produce slightly different results # This is expected: they are different statistical estimates  # of the same underlying value fit <- lm( geneExpr[1,] ~ Tissue + Age, info) calcVarPart( fit ) #>      Tissue         Age   Residuals  #> 0.080655969 0.001012847 0.918331184"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/canCorPairs.html","id":null,"dir":"Reference","previous_headings":"","what":"canCorPairs — canCorPairs","title":"canCorPairs — canCorPairs","text":"Assess correlation pairs variables formula","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/canCorPairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"canCorPairs — canCorPairs","text":"","code":"canCorPairs(formula, data, showWarnings = TRUE)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/canCorPairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"canCorPairs — canCorPairs","text":"formula standard additive linear model formula (support random effects currently, just change syntax) data data.frame data variables formula showWarnings default true","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/canCorPairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"canCorPairs — canCorPairs","text":"Matrix correlation values pairs variables.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/canCorPairs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"canCorPairs — canCorPairs","text":"Canonical Correlation Analysis (CCA) similar correlation two vectors, except CCA can accommodate matricies well.  pair variables, canCorPairs assesses degree co-vary contain information.  Variables formula can continuous variable discrete variable expanded matrix (done backend regression model).  pair variables, canCorPairs uses CCA compute correlation variables returns pairwise correlation matrix. Statistically, let rho array correlation values returned standard R function cancor compute CCA.  canCorPairs() returns sqrt(mean(rho^2)), fraction maximum possible correlation.  comparing two vectors, vector matrix, gives save value absolute correlation.  comparing two sets categorical variables (.e. expanded two matricies), equivalent Cramer's V statistic. Note CCA returns correlation values 0 1.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/canCorPairs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"canCorPairs — canCorPairs","text":"","code":"# load library # library(variancePartition)  # load simulated data: data(varPartData)  # specify formula form <- ~ Individual + Tissue + Batch + Age + Height  # Compute Canonical Correlation Analysis (CCA) # between all pairs of variables # returns absolute correlation value   C = canCorPairs( form, info)  # Plot correlation matrix plotCorrMatrix( C )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/classifyTestsF-MArrayLM2-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Testing Genewise Across Contrasts — classifyTestsF,MArrayLM2-method","title":"Multiple Testing Genewise Across Contrasts — classifyTestsF,MArrayLM2-method","text":"gene, classify series related t-statistics , significant.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/classifyTestsF-MArrayLM2-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple Testing Genewise Across Contrasts — classifyTestsF,MArrayLM2-method","text":"","code":"# S4 method for MArrayLM2 classifyTestsF(   object,   cor.matrix = NULL,   df = Inf,   p.value = 0.01,   fstat.only = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/classifyTestsF-MArrayLM2-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple Testing Genewise Across Contrasts — classifyTestsF,MArrayLM2-method","text":"object numeric matrix t-statistics 'MArrayLM2' object t-statistics may extracted. cor.matrix covariance matrix row t-statistics.  Defaults identity matrix. df numeric vector giving degrees freedom t-statistics.  May length 1 length equal number rows tstat. p.value numeric value 0 1 giving desired size test fstat.logical, 'TRUE' return overall F-statistic 'FStat' instead classifying test results","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/classifyTestsF-MArrayLM2-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple Testing Genewise Across Contrasts — classifyTestsF,MArrayLM2-method","text":"Works like limma::classifyTestsF, except object can list covariance matrices object$cov.coefficients.list, instead just one object$cov.coefficients","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/classifyTestsF.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiple Testing Genewise Across Contrasts — classifyTestsF","title":"Multiple Testing Genewise Across Contrasts — classifyTestsF","text":"gene, classify series related t-statistics , significant.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/classifyTestsF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiple Testing Genewise Across Contrasts — classifyTestsF","text":"","code":"classifyTestsF(object, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/classifyTestsF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiple Testing Genewise Across Contrasts — classifyTestsF","text":"object numeric matrix t-statistics 'MArrayLM2' object t-statistics may extracted. ... additional arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/classifyTestsF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multiple Testing Genewise Across Contrasts — classifyTestsF","text":"Works like limma::classifyTestsF, except object can list covariance matrices object$cov.coefficients.list, instead just one object$cov.coefficients","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/colinearityScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Collinearity score — colinearityScore","title":"Collinearity score — colinearityScore","text":"Collinearity score regression model indicating variables highly correlated give meaningful results","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/colinearityScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collinearity score — colinearityScore","text":"","code":"colinearityScore(fit)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/colinearityScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collinearity score — colinearityScore","text":"fit regression model fit lm() lmer()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/colinearityScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collinearity score — colinearityScore","text":"Returns collinearity score 0 1, score > 0.999 means degree collinearity high.  function reports correlation matrix coefficient estimates fixed effects.  collinearity score maximum absolute correlation value matrix. Note values correlation parameter estimates, variables .","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/colinearityScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collinearity score — colinearityScore","text":"","code":"# load library # library(variancePartition)  # load simulated data: data(varPartData) form <- ~ Age + (1|Individual) + (1|Tissue)   res <- fitVarPartModel( geneExpr[1:10,], form, info )   # evaluate the collinearity score on the first model fit # this reports the correlation matrix between coefficients estimates # for fixed effects # the collinearity score is the maximum absolute correlation value # If the collinearity score > .999 then the variance partition  # estimates may be problematic # In that case, a least one variable should be omitted colinearityScore(res[[1]]) #> [1] 0.7397006 #> attr(,\"vcor\") #>             (Intercept)        Age #> (Intercept)   1.0000000 -0.7397006 #> Age          -0.7397006  1.0000000"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/deviation-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Deviation from expectation for each observation — deviation","title":"Deviation from expectation for each observation — deviation","text":"Given model fit features, residuals computed transformed based absolute value squaring transform.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/deviation-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deviation from expectation for each observation — deviation","text":"","code":"deviation(fit, method = c(\"AD\", \"SQ\"), scale = c(\"leverage\", \"none\"))  # S4 method for MArrayLM deviation(fit, method = c(\"AD\", \"SQ\"), scale = c(\"leverage\", \"none\"))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/deviation-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deviation from expectation for each observation — deviation","text":"fit model fit dream() method transform residuals using absolute deviation (\"AD\") squared deviation (\"SQ\"). scale scale observation \"leverage\", scaling (\"none\")","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/deviation-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deviation from expectation for each observation — deviation","text":"matrix deviations expection observation","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/deviation-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deviation from expectation for each observation — deviation","text":"","code":"# library(variancePartition) library(edgeR) data(varPartDEdata)  # filter genes by number of counts isexpr = rowSums(cpm(countMatrix)>0.1) >= 5  # Standard usage of limma/voom dge = DGEList( countMatrix[isexpr,] ) dge = calcNormFactors( dge )  # make this vignette faster by analyzing a subset of genes dge = dge[1:1000,]  # regression formula form <- ~ Disease   # estimate precision weights vobj = voomWithDreamWeights( dge, form, metadata )  # fit dream model fit = dream( vobj, form, metadata ) fit = eBayes(fit)  # Compute deviation from expection for each observation # using model residuals z = deviation(fit) z[1:4, 1:4] #>                               sample_01 sample_02 sample_03 sample_04 #> ENST00000570099.1 gene=YPEL3 0.04040445 0.1318337 0.3916526 0.4099356 #> ENST00000589123.1 gene=NFIC  0.19896787 0.1255554 0.5928201 0.8993084 #> ENST00000360314.3 gene=CASS4 0.02940427 0.8317505 0.2532487 0.3961843 #> ENST00000456159.1 gene=MET   0.11576522 0.2188826 0.0129174 0.3682492"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Test differential variance — diffVar","title":"Test differential variance — diffVar","text":"Test association covariate interest response's deviation expectation.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test differential variance — diffVar","text":"","code":"diffVar(   fit,   method = c(\"AD\", \"SQ\"),   scale = c(\"leverage\", \"none\"),   BPPARAM = SerialParam(),   ... )  # S4 method for MArrayLM diffVar(   fit,   method = c(\"AD\", \"SQ\"),   scale = c(\"leverage\", \"none\"),   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test differential variance — diffVar","text":"fit model fit dream() method transform residuals using absolute deviation (\"AD\") squared deviation (\"SQ\"). scale scale observation \"leverage\", scaling (\"none\") BPPARAM parameters parallel evaluation ... parameters passed dream()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test differential variance — diffVar","text":"MArrayLM object storing differential results passed topTable()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test differential variance — diffVar","text":"method performs test differential variance two subsets data, way generalizes multiple categories, continuous variables metrics spread beyond variance.  two category test, method simular Levene's test.  model adapted Phipson, et al (2014), extended linear mixed models, adapted compatible dream(). method composed multiple steps 1) typical linear (mixed) model fit dream(), 2) residuals computed transformed based absolute value squaring transform, 3) second regression performed dream() test variable associated increased deviation expectation.  regression take advantage dream() linear (mixed) modelling framework followed empirical Bayes shrinkage extends limma::voom() framework. Note diffVar() takes results first regression parameter use starting point.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test differential variance — diffVar","text":"Phipson B, Oshlack (2014). “DiffVar: new method detecting differential variability application methylation cancer aging.” Genome biology, 15(9), 1--16.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test differential variance — diffVar","text":"","code":"# library(variancePartition) library(edgeR) data(varPartDEdata)  # filter genes by number of counts isexpr = rowSums(cpm(countMatrix)>0.1) >= 5  # Standard usage of limma/voom dge = DGEList( countMatrix[isexpr,] ) dge = calcNormFactors( dge )  # make this vignette faster by analyzing a subset of genes dge = dge[1:1000,]  # regression formula form <- ~ Disease   # estimate precision weights vobj = voomWithDreamWeights( dge, form, metadata )  # fit dream model fit = dream( vobj, form, metadata ) fit = eBayes(fit)  # fit differential variance model res = diffVar( fit )  # extract results for differential variance based on Disease topTable(res, coef = \"Disease1\", number=3) #>                                    logFC   AveExpr         t      P.Value #> ENST00000325884.1 gene=ASCL3  -0.3412386 0.2331510 -4.861381 5.876367e-05 #> ENST00000309971.4 gene=GLE1   -0.7335446 0.5318544 -4.656878 9.887849e-05 #> ENST00000410040.1 gene=IL18R1 -0.4331105 0.3614958 -4.611809 1.109038e-04 #>                                adj.P.Val        B #> ENST00000325884.1 gene=ASCL3  0.03134491 1.851675 #> ENST00000309971.4 gene=GLE1   0.03134491 1.387689 #> ENST00000410040.1 gene=IL18R1 0.03134491 1.285258  # Box plot of top hit # Since ASCL3 has a negative logFC,  # the deviation from expectation is *smaller* in  # Disease==1 compared to baseline. gene = \"ENST00000325884.1 gene=ASCL3\" boxplot(vobj$E[gene,] ~ metadata$Disease, main=gene)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Test differential variance — diffVar","title":"Test differential variance — diffVar","text":"Test association covariate interest response's deviation expectation.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test differential variance — diffVar","text":"","code":"diffVar(fit, method = c(\"AD\", \"SQ\"))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test differential variance — diffVar","text":"fit model fit dream() method transform residuals using absolute deviation (\"AD\") squared deviation \"SQ\".","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test differential variance — diffVar","text":"method performs test differential variance two subsets data, way generalizes multiple categories, continuous variables metrics spread beyond variance.  two category test, method simular Levene's test.  model adapted Phipson, et al (2014), extended linear mixed models, adapted compatible dream() method composed multiple steps 1) typical linear (mixed) model fit dream(), 2) residuals computed transformed based absolute value squaring transform, 3) second regression performed dream() test variable associated increased deviation expectation.  regression take advantage dream() linear (mixed) modelling framework followed empirical Bayes shrinkage extends limma::voom() framework. Note diffVar() takes results first regression parameter use starting point.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Test differential variance — diffVar","text":"Phipson B, Oshlack (2014). “DiffVar: new method detecting differential variability application methylation cancer aging.” Genome biology, 15(9), 1--16.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/diffVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test differential variance — diffVar","text":"","code":"# library(variancePartition) library(edgeR) data(varPartDEdata)  # filter genes by number of counts isexpr = rowSums(cpm(countMatrix)>0.1) >= 5  # Standard usage of limma/voom geneExpr = DGEList( countMatrix[isexpr,] ) geneExpr = calcNormFactors( geneExpr )  # make this vignette faster by analyzing a subset of genes geneExpr = geneExpr[1:1000,]  # regression formula form <- ~ Disease   # estimate precision weights vobj = voomWithDreamWeights( geneExpr, form, metadata ) #> Fixed effect model, using limma directly...  # fit dream model fit = dream( vobj, form, metadata ) #> Fixed effect model, using limma directly... #> User can apply eBayes() afterwards... fit = eBayes(fit)  # fit differential variance model res = diffVar( fit ) #> Fixed effect model, using limma directly... #> User can apply eBayes() afterwards...  # extract results for differential variance based on Disease topTable(res, coef = \"Disease1\") #>                                        logFC   AveExpr         t      P.Value #> ENST00000325884.1 gene=ASCL3      -0.3272797 0.2233979 -4.859993 5.896635e-05 #> ENST00000309971.4 gene=GLE1       -0.7008929 0.5090414 -4.675335 9.433159e-05 #> ENST00000410040.1 gene=IL18R1     -0.4137168 0.3456007 -4.633169 1.050238e-04 #> ENST00000311268.3 gene=GPR162     -0.5253244 0.4422722 -4.576307 1.213896e-04 #> ENST00000382828.2 gene=KRTAP20-4  -0.4241836 0.3897096 -4.475160 1.570582e-04 #> ENST00000336811.6 gene=ANG        -0.3921176 0.3166418 -4.276950 2.601052e-04 #> ENST00000595616.1 gene=AL031320.1 -0.5086145 0.4313518 -4.225943 2.961139e-04 #> ENST00000382533.4 gene=SAP18      -0.3938951 0.4295586 -4.207086 3.106457e-04 #> ENST00000422330.1 gene=CNTN4      -1.1710948 1.1947257 -4.190971 3.236250e-04 #> ENST00000394233.2 gene=ABCD3      -0.2547685 0.2241037 -4.107857 3.996162e-04 #>                                    adj.P.Val         B #> ENST00000325884.1 gene=ASCL3      0.03034739 1.8496624 #> ENST00000309971.4 gene=GLE1       0.03034739 1.4304865 #> ENST00000410040.1 gene=IL18R1     0.03034739 1.3346137 #> ENST00000311268.3 gene=GPR162     0.03034739 1.2052643 #> ENST00000382828.2 gene=KRTAP20-4  0.03141165 0.9750710 #> ENST00000336811.6 gene=ANG        0.03595833 0.5240480 #> ENST00000595616.1 gene=AL031320.1 0.03595833 0.4081002 #> ENST00000382533.4 gene=SAP18      0.03595833 0.3652568 #> ENST00000422330.1 gene=CNTN4      0.03595833 0.3286521 #> ENST00000394233.2 gene=ABCD3      0.03996162 0.1400410  # Box plot of top hit gene = \"ENST00000325884.1 gene=ASCL3\" boxplot(vobj$E[gene,] ~ metadata$Disease, main=gene)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-getAllUniContrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all univariate contrasts — .getAllUniContrasts","title":"Get all univariate contrasts — .getAllUniContrasts","text":"Get univariate contrasts","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-getAllUniContrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all univariate contrasts — .getAllUniContrasts","text":"","code":".getAllUniContrasts(formula, data)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-getAllUniContrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all univariate contrasts — .getAllUniContrasts","text":"formula specifies variables linear (mixed) model.  Must specify covariates, since rows exprObj automatically used response. e.g.: ~ + b + (1|c)  Formulas fixed effects also work data data.frame columns corresponding formula","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-getAllUniContrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all univariate contrasts — .getAllUniContrasts","text":"Matrix testing variable one time.  Contrasts rows","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-isMixedModelFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if model contains a random effect — .isMixedModelFormula","title":"Check if model contains a random effect — .isMixedModelFormula","text":"Check model contains random effect","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-isMixedModelFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if model contains a random effect — .isMixedModelFormula","text":"","code":".isMixedModelFormula(formula)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-isMixedModelFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if model contains a random effect — .isMixedModelFormula","text":"formula model formula","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-standard_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute standard post-processing values — .standard_transform","title":"Compute standard post-processing values — .standard_transform","text":"values typically computed eBayes","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-standard_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute standard post-processing values — .standard_transform","text":"","code":".standard_transform(fit, sigma = fit$sigma)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-standard_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute standard post-processing values — .standard_transform","text":"fit result dream (MArrayLM2) sigma vector standard errors used compute t-statistic. Can maximum likelihood estimates, posterior means","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dot-standard_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute standard post-processing values — .standard_transform","text":"MArrayLM2 object values computed","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dream-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Differential expression with linear mixed model — dream","title":"Differential expression with linear mixed model — dream","text":"Fit linear mixed model differential expression preform hypothesis test fixed effects specified contrast matrix L","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dream-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differential expression with linear mixed model — dream","text":"","code":"dream(   exprObj,   formula,   data,   L,   ddf = c(\"adaptive\", \"Satterthwaite\", \"Kenward-Roger\"),   useWeights = TRUE,   control = vpcontrol,   hideErrorsInBackend = FALSE,   REML = TRUE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dream-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differential expression with linear mixed model — dream","text":"exprObj matrix expression data (g genes x n samples), ExpressionSet, EList returned voom() limma package formula specifies variables linear (mixed) model.  Must specify covariates, since rows exprObj automatically used response. e.g.: ~ + b + (1|c)  Formulas fixed effects also work, lmFit() followed contrasts.fit() run. data data.frame columns corresponding formula L contrast matrix specifying linear combination fixed effects test ddf Specifiy \"Satterthwaite\" \"Kenward-Roger\" method estimate effective degress freedom hypothesis testing linear mixed model.  Note Kenward-Roger accurate, *much* slower.  Satterthwaite good enough approximation datasets. \"adaptive\" (Default) uses KR <= 10 samples. useWeights TRUE, analysis uses heteroskedastic error estimates voom().  Value ignored unless exprObj EList() voom() weightsMatrix specified control control settings lmer() hideErrorsInBackend default FALSE.  TRUE, hide errors attr(.,\"errors\") attr(.,\"error.initial\") REML use restricted maximum likelihood fit linear mixed model. default TRUE.  See Details. BPPARAM parameters parallel evaluation ... Additional arguments lmer() lm()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dream-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differential expression with linear mixed model — dream","text":"MArrayLM2 object (just like MArrayLM limma), directly estimated p-value (without eBayes)","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dream-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differential expression with linear mixed model — dream","text":"linear (mixed) model fit gene exprObj, using formula specify variables regression (Hoffman Roussos, 2021).  categorical variables modeled random effects (recommended), linear mixed model us used.  example formula ~ + b + (1|c), model fit <- lmer( exprObj[j,] ~ + b + (1|c), data=data) useWeights=TRUE causes weightsMatrix[j,] included weights regression model. Note: Fitting model 20,000 genes can computationally intensive.  accelerate computation, models can fit parallel using BiocParallel run code parallel.  Parallel processing must enabled calling function.  See . regression model fit gene separately. Samples missing values either gene expression metadata omitted underlying call lmer. Hypothesis tests degrees freedom producted lmerTest pbkrtest pacakges REML=TRUE required lmerTest ddf='Kenward-Roger', ddf='Satterthwaite' can used REML TRUE FALSE.  Since Kenward-Roger method gave best power accurate control false positive rate simulations, since Satterthwaite method REML=TRUE gives p-values slightly closer Kenward-Roger p-values, REML=TRUE default.  See Vignette \"3) Theory practice random effects REML\"","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dream-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Differential expression with linear mixed model — dream","text":"Hoffman GE, Roussos P (2021). “dream: Powerful differential expression analysis repeated measures designs.” Bioinformatics, 37(2), 192--201.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dream-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differential expression with linear mixed model — dream","text":"","code":"# library(variancePartition) library(BiocParallel)  # load simulated data: # geneExpr: matrix of *normalized* gene expression values # info: information/metadata about each sample data(varPartData)  form <- ~ Batch + (1|Individual) + (1|Tissue)   # Fit linear mixed model for each gene # run on just 10 genes for time # NOTE: dream() runs on *normalized* data fit = dream( geneExpr[1:10,], form, info) fit = eBayes(fit)  # view top genes topTable( fit, coef=\"Batch2\", number=3 ) #>            logFC    AveExpr         t   P.Value adj.P.Val         B     z.std #> gene6 -0.6704969  -3.155479 -1.651191 0.1007721 0.6907337 -4.539539 -1.641122 #> gene2 -0.4942066  -1.128161 -1.340325 0.1821539 0.6907337 -4.569990 -1.334152 #> gene1 -0.4609243 -10.466455 -1.266674 0.2072201 0.6907337 -4.576299 -1.261246  # get contrast matrix testing if the coefficient for Batch3 is  # different from coefficient for Batch2 # Name this comparison as 'compare_3_2' # The variable of interest must be a fixed effect L = makeContrastsDream(form, info, contrasts=c(compare_3_2 = \"Batch3 - Batch2\"))  # plot contrasts plotContrasts( L )   # Fit linear mixed model for each gene # run on just 10 genes for time fit2 = dream( geneExpr[1:10,], form, info, L) fit2 = eBayes(fit2)  # view top genes for this contrast topTable( fit2, coef=\"compare_3_2\", number=3) #>            logFC    AveExpr          t   P.Value adj.P.Val         B     z.std #> gene7  0.4655178 -4.3799381  1.4018135 0.1630312 0.8184625 -4.557141  1.394949 #> gene6 -0.3642792 -3.1554790 -1.0121871 0.3130704 0.8184625 -4.595941 -1.008800 #> gene3 -0.2545920  0.1702122 -0.8117299 0.4182305 0.8184625 -4.611148 -0.809495  # Parallel processing using multiple cores with reduced memory usage param = SnowParam(4, \"SOCK\", progressbar=TRUE) fit3 = dream( geneExpr[1:10,], form, info, L, BPPARAM = param) #> iteration:  #> 1 #> 2 #> 3 #> 4 #>  fit3 = eBayes(fit3)  # Fit fixed effect model for each gene # Use lmFit in the backend form <- ~ Batch  fit4 = dream( geneExpr[1:10,], form, info, L) fit4 = eBayes( fit4 )  # view top genes topTable( fit4, coef=\"compare_3_2\", number=3 ) #>           logFC    AveExpr          t    P.Value adj.P.Val         B #> gene8 -1.835677  0.9171386 -1.8703068 0.06312128 0.6312128 -4.581611 #> gene4 -1.016974 -4.5359748 -1.1783589 0.24026308 0.9496566 -4.593019 #> gene9 -0.711481 -2.3079042 -0.6924022 0.48960809 0.9496566 -4.598021  # Compute residuals using dream residuals(fit4)[1:4, 1:4] #>             s1         s2         s3        s4 #> gene1 2.196588 -7.2102826  1.3618545 0.8055865 #> gene2 1.270341  0.6885371 -0.8045642 2.0594469 #> gene3 1.939465  0.8003329 -1.7723606 3.0120196 #> gene4 2.766271 -2.4954702 -3.5198043 5.2286010"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dscchisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaled chi-square — dscchisq","title":"Scaled chi-square — dscchisq","text":"Scaled chi-square density using gamma distribution","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dscchisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaled chi-square — dscchisq","text":"","code":"dscchisq(x, a, b)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/dscchisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaled chi-square — dscchisq","text":"x vector quantiles. scale b degrees freedom","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayes-method.html","id":null,"dir":"Reference","previous_headings":"","what":"eBayes for MArrayLM2 — eBayes,MArrayLM2-method","title":"eBayes for MArrayLM2 — eBayes,MArrayLM2-method","text":"eBayes result linear mixed model dream() using residual degrees freedom approximated rdf.merMod()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayes-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"eBayes for MArrayLM2 — eBayes,MArrayLM2-method","text":"","code":"# S4 method for MArrayLM2 eBayes(   fit,   proportion = 0.01,   stdev.coef.lim = c(0.1, 4),   trend = FALSE,   robust = FALSE,   winsor.tail.p = c(0.05, 0.1) )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayes-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"eBayes for MArrayLM2 — eBayes,MArrayLM2-method","text":"fit fit proportion proportion stdev.coef.lim stdev.coef.lim trend trend robust robust winsor.tail.p winsor.tail.p","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayes-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"eBayes for MArrayLM2 — eBayes,MArrayLM2-method","text":"results eBayes using approximated residual degrees freedom","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayesFMT.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Bayes Fully Moderated t-statistics — eBayesFMT","title":"Empirical Bayes Fully Moderated t-statistics — eBayesFMT","text":"Empirical Bayes Fully Moderated t-statistics linear mixed model fit dream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayesFMT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Bayes Fully Moderated t-statistics — eBayesFMT","text":"","code":"eBayesFMT(fit, data, Individual, method = c(\"VC\", \"WS\"))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayesFMT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Bayes Fully Moderated t-statistics — eBayesFMT","text":"fit model fit returned dream class MArrayLM2 data data.frame columns corresponding formula Individual string referring column data.frame indicating individual repeated measures come method Use either variance components ('VC') Welch-Satterthwaite ('WS')","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayesFMT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Empirical Bayes Fully Moderated t-statistics — eBayesFMT","text":"Applies empirical Bayes method , Yu, et al. (2019) linear mixed models.  method applies prior shrinkage 1) residual variance 2) variance component estimates 'Individual'.  'Individual' refers variable indicating individual repeated measures come .  method combines posterior values (1) (2) approximate degrees freedom t-statistic. Yu, L., Zhang, J., Brock, G. et al. Fully moderated t-statistic linear modeling mixed effects differential expression analysis. BMC Bioinformatics 20, 675 (2019). https://doi.org/10.1186/s12859-019-3248-9","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/eBayesFMT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Bayes Fully Moderated t-statistics — eBayesFMT","text":"","code":"# load library # library(variancePartition) library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  form <- ~ Batch + (1|Individual) + (1|Tissue)   # Fit linear mixed model for each gene # run on just 10 genes for time fit = dream( geneExpr[1:10,], form, info) #> Dividing work into 1 chunks... #>  #> Total:0.6 s  # view top genes using standard t-statistics topTable( fit ) #> Removing intercept from test coefficients #>             Batch2       Batch3      Batch4     AveExpr          F   P.Value #> gene8   0.02567263 -0.129563777  0.67499421   0.9171386 1.96561914 0.1267816 #> gene6  -0.67049689 -1.034776107 -1.04729128  -3.1554790 1.93232542 0.1319909 #> gene3   0.08200976 -0.172582199 -0.49673001   0.1702122 1.44637527 0.2364513 #> gene1  -0.46092425 -0.453624935 -0.05771812 -10.4664549 1.03262351 0.3833791 #> gene7  -0.31606553  0.149452306 -0.03562447  -4.3799381 0.74258476 0.5301575 #> gene2  -0.49420745 -0.382210977 -0.40013018  -1.1281610 0.62797976 0.5992798 #> gene5   0.26795357  0.006060832  0.27368297   4.7187640 0.32958690 0.8039606 #> gene9  -0.35301416 -0.096570091 -0.12646906  -2.3079042 0.27897593 0.8403964 #> gene10  0.11578714 -0.098856729  0.14565869  -2.3673775 0.27305129 0.8446423 #> gene4   0.11531023  0.122855760  0.13721184  -4.5359748 0.05418364 0.9832565 #>        adj.P.Val      F.std #> gene8  0.6599547 1.90225556 #> gene6  0.6599547 1.87125160 #> gene3  0.7881710 1.41413220 #> gene1  0.9384914 1.01798899 #> gene7  0.9384914 0.73636776 #> gene2  0.9384914 0.62417724 #> gene5  0.9384914 0.32960191 #> gene9  0.9384914 0.27928007 #> gene10 0.9384914 0.27338242 #> gene4  0.9832565 0.05449604  # Compute moderated t-statistics from Yu, et al, 2019 fiteb = variancePartition:::eBayesFMT(fit, info, 'Individual') topTable( fiteb ) #> Removing intercept from test coefficients #> topTableF is obsolete and will be removed in a future version of limma. Please considering using topTable instead. #>             Batch2       Batch3      Batch4     AveExpr          F   P.Value #> gene6  -0.67049689 -1.034776107 -1.04729128  -3.1554790 0.49876352 0.6843109 #> gene8   0.02567263 -0.129563777  0.67499421   0.9171386 0.36318893 0.7797634 #> gene3   0.08200976 -0.172582199 -0.49673001   0.1702122 0.20303106 0.8939750 #> gene7  -0.31606553  0.149452306 -0.03562447  -4.3799381 0.15424030 0.9266352 #> gene1  -0.46092425 -0.453624935 -0.05771812 -10.4664549 0.14981701 0.9294858 #> gene2  -0.49420745 -0.382210977 -0.40013018  -1.1281610 0.11010298 0.9539356 #> gene5   0.26795357  0.006060832  0.27368297   4.7187640 0.06850536 0.9765104 #> gene9  -0.35301416 -0.096570091 -0.12646906  -2.3079042 0.06256423 0.9793859 #> gene10  0.11578714 -0.098856729  0.14565869  -2.3673775 0.04373560 0.9877395 #> gene4   0.11531023  0.122855760  0.13721184  -4.5359748 0.01288501 0.9979822 #>        adj.P.Val      F.std #> gene6  0.9979822 0.49705501 #> gene8  0.9979822 0.36295415 #> gene3  0.9979822 0.20357178 #> gene7  0.9979822 0.15480749 #> gene1  0.9979822 0.15038173 #> gene2  0.9979822 0.11060913 #> gene5  0.9979822 0.06887981 #> gene9  0.9979822 0.06291398 #> gene10 0.9979822 0.04399733 #> gene4  0.9979822 0.01297045"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/extractVarPart.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variance statistics — extractVarPart","title":"Extract variance statistics — extractVarPart","text":"Extract variance statistics list models fit lm() lmer()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/extractVarPart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variance statistics — extractVarPart","text":"","code":"extractVarPart(modelList, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/extractVarPart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variance statistics — extractVarPart","text":"modelList list lmer() model fits ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/extractVarPart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variance statistics — extractVarPart","text":"data.frame fraction variance explained variable, correcting others.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/extractVarPart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variance statistics — extractVarPart","text":"","code":"# library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   # Step 1: fit linear mixed model on gene expresson # If categoritical variables are specified, a linear mixed model is used # If all variables are modeled as continuous, a linear model is used # each entry in results is a regression model fit on a single gene # Step 2: extract variance fractions from each model fit # for each gene, returns fraction of variation attributable to each variable  # Interpretation: the variance explained by each variable # after correction for all other variables varPart <- fitExtractVarPartModel( geneExpr, form, info )   # violin plot of contribution of each variable to total variance plotVarPart( sortCols( varPart ) )   # Advanced:  # Fit model and extract variance in two separate steps # Step 1: fit model for each gene, store model fit for each gene in a list results <- fitVarPartModel( geneExpr, form, info )  # Step 2: extract variance fractions varPart <- extractVarPart( results )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitExtractVarPartModel-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear (mixed) model, report variance fractions — fitExtractVarPartModel","title":"Fit linear (mixed) model, report variance fractions — fitExtractVarPartModel","text":"Fit linear (mixed) model estimate contribution multiple sources variation simultaneously correcting variables. Report fraction variance attributable variable","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitExtractVarPartModel-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear (mixed) model, report variance fractions — fitExtractVarPartModel","text":"","code":"fitExtractVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for matrix fitExtractVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for data.frame fitExtractVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for EList fitExtractVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for ExpressionSet fitExtractVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for sparseMatrix fitExtractVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitExtractVarPartModel-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear (mixed) model, report variance fractions — fitExtractVarPartModel","text":"exprObj matrix expression data (g genes x n samples), ExpressionSet, EList returned voom() limma package formula specifies variables linear (mixed) model.  Must specify covariates, since rows exprObj automatically used response. e.g.: ~ + b + (1|c) data data.frame columns corresponding formula REML use restricted maximum likelihood fit linear mixed model. default FALSE.   See Details. useWeights TRUE, analysis uses heteroskedastic error estimates voom().  Value ignored unless exprObj EList() voom() weightsMatrix specified control control settings lmer() showWarnings default TRUE. Indicate model failures BPPARAM parameters parallel evaluation ... Additional arguments lmer() lm()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitExtractVarPartModel-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear (mixed) model, report variance fractions — fitExtractVarPartModel","text":"list() entry model fit produced lmer() lm()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitExtractVarPartModel-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit linear (mixed) model, report variance fractions — fitExtractVarPartModel","text":"linear (mixed) model fit gene exprObj, using formula specify variables regression.  categorical variables modeled random effects (recommended), linear mixed model us used.  example formula ~ + b + (1|c), model fit <- lmer( exprObj[j,] ~ + b + (1|c), data=data) random effects, formula ~ + b + c, 'standard' linear model used: fit <- lm( exprObj[j,] ~ + b + c, data=data) cases, useWeights=TRUE causes weightsMatrix[j,] included weights regression model. Note: Fitting model 20,000 genes can computationally intensive.  accelerate computation, models can fit parallel using BiocParallel run parallel.  Parallel processing must enabled calling function.  See . regression model fit gene separately. Samples missing values either gene expression metadata omitted underlying call lm/lmer. REML=FALSE uses maximum likelihood estimate variance fractions.  approach produced unbiased estimates, REML=TRUE can show substantial bias.  See Vignette \"3) Theory practice random effects REML\"","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitExtractVarPartModel-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit linear (mixed) model, report variance fractions — fitExtractVarPartModel","text":"","code":"# load library # library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   # Step 1: fit linear mixed model on gene expression # If categorical variables are specified, a linear mixed model is used # If all variables are modeled as continuous, a linear model is used # each entry in results is a regression model fit on a single gene # Step 2: extract variance fractions from each model fit # for each gene, returns fraction of variation attributable to each variable  # Interpretation: the variance explained by each variable # after correction for all other variables varPart <- fitExtractVarPartModel( geneExpr, form, info )   # violin plot of contribution of each variable to total variance plotVarPart( sortCols( varPart ) )   # Note: fitExtractVarPartModel also accepts ExpressionSet data(sample.ExpressionSet, package=\"Biobase\")  # ExpressionSet example form <- ~ (1|sex) + (1|type) + score info2 <- Biobase::pData(sample.ExpressionSet) varPart2 <- fitExtractVarPartModel( sample.ExpressionSet, form, info2 )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitVarPartModel-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit linear (mixed) model — fitVarPartModel","title":"Fit linear (mixed) model — fitVarPartModel","text":"Fit linear (mixed) model estimate contribution multiple sources variation simultaneously correcting variables.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitVarPartModel-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit linear (mixed) model — fitVarPartModel","text":"","code":"fitVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   fxn = identity,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for matrix fitVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   fxn = identity,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for data.frame fitVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   fxn = identity,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for EList fitVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   fxn = identity,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for ExpressionSet fitVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   fxn = identity,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for sparseMatrix fitVarPartModel(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   fxn = identity,   control = vpcontrol,   showWarnings = TRUE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitVarPartModel-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit linear (mixed) model — fitVarPartModel","text":"exprObj matrix expression data (g genes x n samples), ExpressionSet, EList returned voom() limma package formula specifies variables linear (mixed) model.  Must specify covariates, since rows exprObj automatically used response. e.g.: ~ + b + (1|c) data data.frame columns corresponding formula REML use restricted maximum likelihood fit linear mixed model. default FALSE.  See Details. useWeights TRUE, analysis uses heteroskedastic error estimates voom().  Value ignored unless exprObj EList() voom() weightsMatrix specified fxn apply function model fit gene.  Defaults identify function returns model fit control control settings lmer() showWarnings default TRUE. Indicate model failures BPPARAM parameters parallel evaluation ... Additional arguments lmer() lm()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitVarPartModel-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit linear (mixed) model — fitVarPartModel","text":"list() entry model fit produced lmer() lm()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitVarPartModel-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit linear (mixed) model — fitVarPartModel","text":"linear (mixed) model fit gene exprObj, using formula specify variables regression.  categorical variables modeled random effects (recommended), linear mixed model us used.  example formula ~ + b + (1|c), model fit <- lmer( exprObj[j,] ~ + b + (1|c), data=data) random effects, formula ~ + b + c, 'standard' linear model used: fit <- lm( exprObj[j,] ~ + b + c, data=data) cases, useWeights=TRUE causes weightsMatrix[j,] included weights regression model. Note: Fitting model 20,000 genes can computationally intensive.  accelerate computation, models can fit parallel using BiocParallel run parallel.  Parallel processing must enabled calling function.  See . regression model fit gene separately. Samples missing values either gene expression metadata omitted underlying call lm/lmer. Since function returns list model fit, using function slower uses memory fitExtractVarPartModel(). REML=FALSE uses maximum likelihood estimate variance fractions.  approach produced unbiased estimates, REML=TRUE can show substantial bias.  See Vignette \"3) Theory practice random effects REML\"","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/fitVarPartModel-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit linear (mixed) model — fitVarPartModel","text":"","code":"# load library # library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   # Step 1: fit linear mixed model on gene expression # If categorical variables are specified, a linear mixed model is used # If all variables are modeled as continuous, a linear model is used # each entry in results is a regression model fit on a single gene # Step 2: extract variance fractions from each model fit # for each gene, returns fraction of variation attributable to each variable  # Interpretation: the variance explained by each variable # after correction for all other variables varPart <- fitExtractVarPartModel( geneExpr, form, info )   # violin plot of contribution of each variable to total variance # also sort columns plotVarPart( sortCols( varPart ) )   # Advanced:  # Fit model and extract variance in two separate steps # Step 1: fit model for each gene, store model fit for each gene in a list results <- fitVarPartModel( geneExpr, form, info )  # Step 2: extract variance fractions varPart <- extractVarPart( results )  # Note: fitVarPartModel also accepts ExpressionSet data(sample.ExpressionSet, package=\"Biobase\")  # ExpressionSet example form <- ~ (1|sex) + (1|type) + score info2 <- Biobase::pData(sample.ExpressionSet) results2 <- fitVarPartModel( sample.ExpressionSet, form, info2 )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getContrast-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract contrast matrix for linear mixed model — getContrast","title":"Extract contrast matrix for linear mixed model — getContrast","text":"Extract contrast matrix, L, testing single variable.  Contrasts involving one variable can constructed modifying L directly","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getContrast-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract contrast matrix for linear mixed model — getContrast","text":"","code":"getContrast(exprObj, formula, data, coefficient)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getContrast-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract contrast matrix for linear mixed model — getContrast","text":"exprObj matrix expression data (g genes x n samples), ExpressionSet, EList returned voom() limma package formula specifies variables linear (mixed) model.  Must specify covariates, since rows exprObj automatically used response. e.g.: ~ + b + (1|c)  Formulas fixed effects also work data data.frame columns corresponding formula coefficient coefficient use hypothesis test","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getContrast-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract contrast matrix for linear mixed model — getContrast","text":"Contrast matrix testing one variable","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getContrast-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract contrast matrix for linear mixed model — getContrast","text":"","code":"# load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # get contrast matrix testing if the coefficient for Batch2 is zero  # The variable of interest must be a fixed effect form <- ~ Batch + (1|Individual) + (1|Tissue)  L = getContrast( geneExpr, form, info, \"Batch3\")  # get contrast matrix testing if Batch3 - Batch2 = 0 form <- ~ Batch + (1|Individual) + (1|Tissue)  L = getContrast( geneExpr, form, info, c(\"Batch3\", \"Batch2\"))  # To test against Batch1 use the formula: #   ~ 0 + Batch + (1|Individual) + (1|Tissue)  # to estimate Batch1 directly instead of using it as the baseline"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getTreat-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if coefficient is different from a specified value — getTreat","title":"Test if coefficient is different from a specified value — getTreat","text":"Test coefficient different specified value","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getTreat-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if coefficient is different from a specified value — getTreat","text":"","code":"getTreat(fit, lfc = log2(1.2), coef = 1, number = 10, sort.by = \"p\")  # S4 method for MArrayLM getTreat(fit, lfc = log2(1.2), coef = 1, number = 10, sort.by = \"p\")  # S4 method for MArrayLM2 getTreat(fit, lfc = log2(1.2), coef = 1, number = 10, sort.by = \"p\")"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getTreat-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if coefficient is different from a specified value — getTreat","text":"fit fit lfc minimum log2-fold-change changes considered scientifically meaningful coef coefficient test number number genes return sort.column sort ","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getTreat-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if coefficient is different from a specified value — getTreat","text":"results getTreat","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/getTreat-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if coefficient is different from a specified value — getTreat","text":"","code":"data(varPartData)    form <- ~ Age + Batch + (1|Individual) + (1|Tissue)   fit = dream( geneExpr, form, info) fit = eBayes(fit)  coef = 'Age'  # Evaluate treat()/topTreat() in a way that works seamlessly for dream() getTreat(fit, lfc=log2(1.03), coef, sort.by=\"none\", number=3) #>             logFC     AveExpr t   P.Value adj.P.Val         B z.std #> gene1 0.005551165 -10.4664549 0 0.9883098 0.9997873 -6.323909     0 #> gene2 0.013121135  -1.1281610 0 0.9586897 0.9997873 -6.085180     0 #> gene3 0.020151483   0.1702122 0 0.9212652 0.9997873 -5.585954     0"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/get_prediction-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute predicted value of formula for linear (mixed) model — get_prediction","title":"Compute predicted value of formula for linear (mixed) model — get_prediction","text":"Compute predicted value formula linear (mixed) model lm lmer","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/get_prediction-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute predicted value of formula for linear (mixed) model — get_prediction","text":"","code":"get_prediction(fit, formula)  # S4 method for lmerMod get_prediction(fit, formula)  # S4 method for lm get_prediction(fit, formula)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/get_prediction-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute predicted value of formula for linear (mixed) model — get_prediction","text":"fit model fit lm lmer formula formula fixed random effects predict","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/get_prediction-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute predicted value of formula for linear (mixed) model — get_prediction","text":"Predicted values formula using parameter estimates fit linear (mixed) model","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/get_prediction-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute predicted value of formula for linear (mixed) model — get_prediction","text":"Similar motivation lme4:::predict.merMod(), function use just subset fixed effects: either uses none .  Note intercept included formula default.  exclude prediction use ~ 0 + ... syntax","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/get_prediction-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute predicted value of formula for linear (mixed) model — get_prediction","text":"","code":"library(lme4)  # Linear model fit <- lm(Reaction ~ Days, sleepstudy)  # prediction of intercept get_prediction( fit, ~ 1) #>        1        2        3        4        5        6        7        8  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>        9       10       11       12       13       14       15       16  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       17       18       19       20       21       22       23       24  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       25       26       27       28       29       30       31       32  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       33       34       35       36       37       38       39       40  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       41       42       43       44       45       46       47       48  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       49       50       51       52       53       54       55       56  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       57       58       59       60       61       62       63       64  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       65       66       67       68       69       70       71       72  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       73       74       75       76       77       78       79       80  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       81       82       83       84       85       86       87       88  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       89       90       91       92       93       94       95       96  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>       97       98       99      100      101      102      103      104  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      105      106      107      108      109      110      111      112  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      113      114      115      116      117      118      119      120  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      121      122      123      124      125      126      127      128  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      129      130      131      132      133      134      135      136  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      137      138      139      140      141      142      143      144  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      145      146      147      148      149      150      151      152  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      153      154      155      156      157      158      159      160  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      161      162      163      164      165      166      167      168  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      169      170      171      172      173      174      175      176  #> 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051 251.4051  #>      177      178      179      180  #> 251.4051 251.4051 251.4051 251.4051   # prediction of Days without intercept get_prediction( fit, ~ 0 + Days) #>        1        2        3        4        5        6        7        8  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>        9       10       11       12       13       14       15       16  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>       17       18       19       20       21       22       23       24  #> 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186  #>       25       26       27       28       29       30       31       32  #> 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729  #>       33       34       35       36       37       38       39       40  #> 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  #>       41       42       43       44       45       46       47       48  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>       49       50       51       52       53       54       55       56  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>       57       58       59       60       61       62       63       64  #> 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186  #>       65       66       67       68       69       70       71       72  #> 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729  #>       73       74       75       76       77       78       79       80  #> 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  #>       81       82       83       84       85       86       87       88  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>       89       90       91       92       93       94       95       96  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>       97       98       99      100      101      102      103      104  #> 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186  #>      105      106      107      108      109      110      111      112  #> 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729  #>      113      114      115      116      117      118      119      120  #> 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  #>      121      122      123      124      125      126      127      128  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>      129      130      131      132      133      134      135      136  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>      137      138      139      140      141      142      143      144  #> 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186  #>      145      146      147      148      149      150      151      152  #> 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729  #>      153      154      155      156      157      158      159      160  #> 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  #>      161      162      163      164      165      166      167      168  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>      169      170      171      172      173      174      175      176  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>      177      178      179      180  #> 62.80372 73.27100 83.73829 94.20557   # Linear mixed model  # fit model fm1 <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)  # predict Days, but exclude intercept get_prediction( fm1, ~ 0 + Days) #>        1        2        3        4        5        6        7        8  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>        9       10       11       12       13       14       15       16  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>       17       18       19       20       21       22       23       24  #> 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186  #>       25       26       27       28       29       30       31       32  #> 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729  #>       33       34       35       36       37       38       39       40  #> 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  #>       41       42       43       44       45       46       47       48  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>       49       50       51       52       53       54       55       56  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>       57       58       59       60       61       62       63       64  #> 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186  #>       65       66       67       68       69       70       71       72  #> 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729  #>       73       74       75       76       77       78       79       80  #> 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  #>       81       82       83       84       85       86       87       88  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>       89       90       91       92       93       94       95       96  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>       97       98       99      100      101      102      103      104  #> 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186  #>      105      106      107      108      109      110      111      112  #> 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729  #>      113      114      115      116      117      118      119      120  #> 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  #>      121      122      123      124      125      126      127      128  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>      129      130      131      132      133      134      135      136  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>      137      138      139      140      141      142      143      144  #> 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186  #>      145      146      147      148      149      150      151      152  #> 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  0.00000 10.46729  #>      153      154      155      156      157      158      159      160  #> 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100 83.73829 94.20557  #>      161      162      163      164      165      166      167      168  #>  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643 62.80372 73.27100  #>      169      170      171      172      173      174      175      176  #> 83.73829 94.20557  0.00000 10.46729 20.93457 31.40186 41.86914 52.33643  #>      177      178      179      180  #> 62.80372 73.27100 83.73829 94.20557   # predict Days and (Days | Subject) random effect, but exclude intercept get_prediction( fm1, ~ 0 + Days +  (Days | Subject)) #>           1           2           3           4           5           6  #>   2.2585509  21.9248127  41.5910744  61.2573361  80.9235979 100.5898596  #>           7           8           9          10          11          12  #> 120.2561213 139.9223830 159.5886448 179.2549065 -40.3987381 -38.5511327  #>          13          14          15          16          17          18  #> -36.7035274 -34.8559220 -33.0083167 -31.1607114 -29.3131060 -27.4655007  #>          19          20          21          22          23          24  #> -25.6178953 -23.7702900 -38.9604090 -33.9419795 -28.9235500 -23.9051205  #>          25          26          27          28          29          30  #> -18.8866910 -13.8682615  -8.8498320  -3.8314025   1.1870270   6.2054565  #>          31          32          33          34          35          36  #>  23.6906196  29.3435552  34.9964908  40.6494265  46.3023621  51.9552978  #>          37          38          39          40          41          42  #>  57.6082334  63.2611690  68.9141047  74.5670403  22.2603126  29.6576869  #>          43          44          45          46          47          48  #>  37.0550613  44.4524356  51.8498100  59.2471843  66.6445587  74.0419330  #>          49          50          51          52          53          54  #>  81.4393074  88.8366817   9.0395679  19.2346769  29.4297858  39.6248948  #>          55          56          57          58          59          60  #>  49.8200038  60.0151127  70.2102217  80.4053307  90.6004396 100.7955486  #>          61          62          63          64          65          66  #>  16.8405086  27.0841585  37.3278084  47.5714582  57.8151081  68.0587580  #>          67          68          69          70          71          72  #>  78.3024079  88.5460577  98.7897076 109.0333575  -7.2326151   4.3092525  #>          73          74          75          76          77          78  #>  15.8511201  27.3929877  38.9348553  50.4767229  62.0185906  73.5604582  #>          79          80          81          82          83          84  #>  85.1023258  96.6441934  -0.3336684  -0.6185476  -0.9034268  -1.1883061  #>          85          86          87          88          89          90  #>  -1.4731853  -1.7580645  -2.0429437  -2.3278229  -2.6127022  -2.8975814  #>          91          92          93          94          95          96  #>  34.8904868  53.9860379  73.0815891  92.1771402 111.2726913 130.3682424  #>          97          98          99         100         101         102  #> 149.4637935 168.5593447 187.6548958 206.7504469 -25.2102286 -13.5695105  #>         103         104         105         106         107         108  #>  -1.9287923   9.7119258  21.3526439  32.9933620  44.6340802  56.2747983  #>         109         110         111         112         113         114  #>  67.9155164  79.5562346 -13.0700342   4.0114696  21.0929734  38.1744772  #>         115         116         117         118         119         120  #>  55.2559809  72.3374847  89.4189885 106.5004922 123.5819960 140.6634998  #>         121         122         123         124         125         126  #>   4.5778642  12.0298881  19.4819119  26.9339358  34.3859597  41.8379836  #>         127         128         129         130         131         132  #>  49.2900074  56.7420313  64.1940552  71.6460791  20.8636782  34.8669653  #>         133         134         135         136         137         138  #>  48.8702523  62.8735394  76.8768265  90.8801136 104.8834007 118.8866878  #>         139         140         141         142         143         144  #> 132.8899748 146.8932619   3.2754656  14.6149665  25.9544673  37.2939681  #>         145         146         147         148         149         150  #>  48.6334689  59.9729698  71.3124706  82.6519714  93.9914723 105.3309731  #>         151         152         153         154         155         156  #> -25.6129993 -10.3232284   4.9665425  20.2563134  35.5460843  50.8358553  #>         157         158         159         160         161         162  #>  66.1256262  81.4153971  96.7051680 111.9949389   0.8070461  10.2861758  #>         163         164         165         166         167         168  #>  19.7653056  29.2444353  38.7235650  48.2026948  57.6818245  67.1609542  #>         169         170         171         172         173         174  #>  76.6400840  86.1192137  12.3145921  24.0659001  35.8172082  47.5685162  #>         175         176         177         178         179         180  #>  59.3198243  71.0711323  82.8224403  94.5737484 106.3250564 118.0763644"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ggColorHue.html","id":null,"dir":"Reference","previous_headings":"","what":"Default colors for ggplot — ggColorHue","title":"Default colors for ggplot — ggColorHue","text":"Return array n colors default used ggplot2","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ggColorHue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default colors for ggplot — ggColorHue","text":"","code":"ggColorHue(n)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ggColorHue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default colors for ggplot — ggColorHue","text":"n number colors","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ggColorHue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default colors for ggplot — ggColorHue","text":"array colors length n","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/ggColorHue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default colors for ggplot — ggColorHue","text":"","code":"ggColorHue(4) #> [1] \"#F8766D\" \"#7CAE00\" \"#00BFC4\" \"#C77CFF\""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/hatvalues-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute hatvalues — hatvalues,MArrayLM-method","title":"Compute hatvalues — hatvalues,MArrayLM-method","text":"Compute hatvalues dream fit","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/hatvalues-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute hatvalues — hatvalues,MArrayLM-method","text":"","code":"# S4 method for MArrayLM hatvalues(model, vobj, ...)  # S4 method for MArrayLM2 hatvalues(model, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/hatvalues-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute hatvalues — hatvalues,MArrayLM-method","text":"model model fit dream() vobj EList returned voom() voomWithDreamWeights(). ... arguments, currently ignored","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/isRunableFormula.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if formula is full rank on this dataset — isRunableFormula","title":"Test if formula is full rank on this dataset — isRunableFormula","text":"Test formula full rank dataset","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/isRunableFormula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if formula is full rank on this dataset — isRunableFormula","text":"","code":"isRunableFormula(exprObj, formula, data)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/isRunableFormula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if formula is full rank on this dataset — isRunableFormula","text":"exprObj expression object formula formula data data","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/makeContrastsDream.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Matrix of Custom Contrasts — makeContrastsDream","title":"Construct Matrix of Custom Contrasts — makeContrastsDream","text":"Construct contrast matrix corresponding specified contrasts set parameters. specified set contrast weights must sum 1.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/makeContrastsDream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Matrix of Custom Contrasts — makeContrastsDream","text":"","code":"makeContrastsDream(   formula,   data,   ...,   contrasts = NULL,   suppressWarnings = FALSE,   nullOnError = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/makeContrastsDream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Matrix of Custom Contrasts — makeContrastsDream","text":"formula specifies variables linear (mixed) model.  Must specify covariates, since rows exprObj automatically used response. e.g.: ~ + b + (1|c)  Formulas fixed effects also work data data.frame columns corresponding formula ... expressions, character strings can parsed expressions, specifying contrasts contrasts character vector specifying contrasts suppressWarnings (default FALSE). suppress warnings univariate contrasts nullOnError (default FALSE). contrast entry invalid, throw warning return NULL contrast entry","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/makeContrastsDream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Matrix of Custom Contrasts — makeContrastsDream","text":"matrix linear contrasts regression coefficients","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/makeContrastsDream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct Matrix of Custom Contrasts — makeContrastsDream","text":"function expresses contrasts set parameters numeric matrix. parameters usually coefficients linear (mixed) model fit, matrix specifies comparisons coefficients extracted fit. output function usually used input dream(). function creates matrix storing contrasts weights applied coefficient. Consider variable v levels c('', 'B', 'C').  contrast comparing B 'vA - vB' tests whether difference levels different zero. Coded 3 levels weights c(1, -1, 0).  order compare levels, contrast 'vA - (vB + vC)/2' compared average two levels. encoded c(1, -0.5, -0.5).  type proper matching testing multiple levels enforced ensuring contrast weights sum 1. Based standard regression theory weighted sums estimated coefficients supported. function inspired limma::makeContrasts() designed compatible linear mixed models dream() Names ... contrasts used column names returned value.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/makeContrastsDream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct Matrix of Custom Contrasts — makeContrastsDream","text":"","code":"# load library # library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  form <- ~ 0 + Batch + (1|Individual) + (1|Tissue)   # Define contrasts # Note that for each contrass, the weights sum to 1 L = makeContrastsDream( form, info, contrasts = c(Batch1_vs_2 = \"Batch1 - Batch2\", Batch3_vs_4 = \"Batch3 - Batch4\", Batch1_vs_34 = \"Batch1 - (Batch3 + Batch4)/2\"))  # show contrasts matrix L #>         Contrasts #> Levels   Batch1_vs_2 Batch3_vs_4 Batch1_vs_34 #>   Batch1           1           0          1.0 #>   Batch2          -1           0          0.0 #>   Batch3           0           1         -0.5 #>   Batch4           0          -1         -0.5  # Plot to visualize contrasts matrix plotContrasts(L)   # Fit linear mixed model for each gene # run on just 10 genes for time fit = dream( geneExpr[1:10,], form, info, L=L)  # examine contrasts after fitting head(coef(fit)) #>       Batch1_vs_2 Batch3_vs_4 Batch1_vs_34      Batch1      Batch2      Batch3 #> gene1  0.46092425 -0.39590682    0.2556715 -10.1696108 -10.6305350 -10.6232357 #> gene2  0.49420745  0.01791921    0.3911706  -0.7408132  -1.2350206  -1.1230241 #> gene3 -0.08200976  0.32414781    0.3346561   0.3469564   0.4289662   0.1743742 #> gene4 -0.11531023 -0.01435608   -0.1300338  -4.6207874  -4.5054771  -4.4979316 #> gene5 -0.26795357 -0.26762214   -0.1398719   4.6243196   4.8922731   4.6303804 #> gene6  0.67049689  0.01251517    1.0410337  -2.4959563  -3.1664532  -3.5307325 #>            Batch4 #> gene1 -10.2273289 #> gene2  -1.1409433 #> gene3  -0.1497736 #> gene4  -4.4835755 #> gene5   4.8980025 #> gene6  -3.5432476  # show results from first contrast topTable(fit, coef=\"Batch1_vs_2\") #>              logFC     AveExpr           t   P.Value adj.P.Val       z.std #> gene6   0.67049689  -3.1554790  1.52366339 0.1319712 0.6497599  1.50637414 #> gene2   0.49420745  -1.1281610  1.36219015 0.1774115 0.6497599  1.34876797 #> gene1   0.46092425 -10.4664549  1.30835356 0.1949280 0.6497599  1.29613790 #> gene7   0.31606553  -4.3799381  0.84073462 0.4032967 0.8431315  0.83574794 #> gene9   0.35301610  -2.3079042  0.77799477 0.4391161 0.8431315  0.77368663 #> gene5  -0.26795357   4.7187640 -0.66862559 0.5058789 0.8431315 -0.66526828 #> gene10 -0.11579122  -2.3673775 -0.35847448 0.7210434 0.8940896 -0.35706470 #> gene4  -0.11531023  -4.5359748 -0.34244225 0.7330176 0.8940896 -0.34111426 #> gene3  -0.08200976   0.1702122 -0.24821747 0.8046806 0.8940896 -0.24729409 #> gene8  -0.02567263   0.9171386 -0.06725961 0.9465626 0.9465626 -0.06702401  # show results from second contrast topTable(fit, coef=\"Batch3_vs_4\") #>              logFC     AveExpr           t    P.Value adj.P.Val       z.std #> gene8  -0.80455799   0.9171386 -2.16904635 0.03340121 0.3340121 -2.12722716 #> gene1  -0.39590682 -10.4664549 -1.16045670 0.24967624 0.9767482 -1.15113612 #> gene3   0.32414781   0.1702122  1.01160906 0.31512596 0.9767482  1.00452431 #> gene10 -0.24451321  -2.3673775 -0.77854924 0.43881477 0.9767482 -0.77419620 #> gene5  -0.26762214   4.7187640 -0.68664313 0.49452493 0.9767482 -0.68312963 #> gene7   0.18507678  -4.3799381  0.50649399 0.61406680 0.9767482  0.50427691 #> gene9   0.02990086  -2.3079042  0.06771983 0.94619681 0.9767482  0.06748348 #> gene2   0.01791921  -1.1281610  0.05082868 0.95960356 0.9767482  0.05065108 #> gene4  -0.01435608  -4.5359748 -0.04385867 0.96513877 0.9767482 -0.04370599 #> gene6   0.01251517  -3.1554790  0.02924752 0.97674821 0.9767482  0.02914593  # show results from third contrast topTable(fit, coef=\"Batch1_vs_34\") #>              logFC     AveExpr           t    P.Value adj.P.Val       z.std #> gene6   1.04103369  -3.1554790  2.37923408 0.01998146 0.1998146  2.32669579 #> gene2   0.39117058  -1.1281610  1.08409908 0.28193902 0.9421247  1.07597371 #> gene3   0.33465610   0.1702122  1.01819011 0.31201734 0.9421247  1.01099809 #> gene1   0.25567153 -10.4664549  0.72973043 0.46791597 0.9421247  0.72587408 #> gene8  -0.27271522   0.9171386 -0.71831187 0.47489082 0.9421247 -0.71454406 #> gene4  -0.13003380  -4.5359748 -0.38839218 0.69886587 0.9421247 -0.38685188 #> gene5  -0.13987190   4.7187640 -0.35098159 0.72662357 0.9421247 -0.34962044 #> gene9   0.11152288  -2.3079042  0.24726631 0.80539881 0.9421247  0.24636615 #> gene7  -0.05691392  -4.3799381 -0.15221534 0.87944287 0.9421247 -0.15167551 #> gene10 -0.02340503  -2.3673775 -0.07285348 0.94212472 0.9421247 -0.07259963"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate tests on results from dream() — mvTest","title":"Multivariate tests on results from dream() — mvTest","text":"Evaluate multivariate tests results dream() using vcov() compute covariance estimated regression coefficients across multiple responses.  joint test see coefficients jointly different zero performed using meta-analysis methods account covariance.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate tests on results from dream() — mvTest","text":"","code":"mvTest(   fit,   vobj,   features,   coef,   method = c(\"FE.empirical\", \"FE\", \"RE2C\", \"tstat\", \"hotelling\", \"sidak\", \"fisher\"),   shrink.cov = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for MArrayLM,EList,vector mvTest(   fit,   vobj,   features,   coef,   method = c(\"FE.empirical\", \"FE\", \"RE2C\", \"tstat\", \"hotelling\", \"sidak\", \"fisher\"),   shrink.cov = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for MArrayLM,EList,missing mvTest(   fit,   vobj,   features,   coef,   method = c(\"FE.empirical\", \"FE\", \"RE2C\", \"tstat\", \"hotelling\", \"sidak\", \"fisher\"),   shrink.cov = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for MArrayLM,EList,list mvTest(   fit,   vobj,   features,   coef,   method = c(\"FE.empirical\", \"FE\", \"RE2C\", \"tstat\", \"hotelling\", \"sidak\", \"fisher\"),   shrink.cov = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for mvTest_input,ANY,ANY mvTest(   fit,   vobj,   features,   coef,   method = c(\"FE.empirical\", \"FE\", \"RE2C\", \"tstat\", \"hotelling\", \"sidak\", \"fisher\"),   shrink.cov = TRUE,   BPPARAM = SerialParam(),   ... )  # S4 method for MArrayLM,matrix,ANY mvTest(   fit,   vobj,   features,   coef,   method = c(\"FE.empirical\", \"FE\", \"RE2C\", \"tstat\", \"hotelling\", \"sidak\", \"fisher\"),   shrink.cov = TRUE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate tests on results from dream() — mvTest","text":"fit MArrayLM MArrayLM2 returned dream() vobj matrix EList object returned voom() features ) indeces names features perform multivariate test , b) list indeces names.  missing, perform joint test features. coef name coefficient contrast tested method statistical method used perform multivariate test.  See details.  'FE' fixed effect test models covariance coefficients.  'FE.empirical' use compute empirical p-values sampling null distribution fitting gamma. 'RE2C' random effect test heterogeneity estimated coefficients models covariance coefficients, also incorporates fixed effects test . 'tstat' combines t-statistics models covariance coefficients. 'hotelling' performs Hotelling T2 test. 'sidak' returns smallest p-value accounting number tests. 'fisher' combines p-value using Fisher's method assuming independent tests. shrink.cov shrink covariance matrix coefficients using Schafer-Strimmer method BPPARAM parameters parallel evaluation ... arugments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate tests on results from dream() — mvTest","text":"Returns data.frame statistics test, pvalue test, n_features,  method, lambda Schafer-Strimmer method shrink estimated covariance.  shrink.cov=FALSE, lambda = 0.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate tests on results from dream() — mvTest","text":"See package remaCor details remaCor::RE2C() test, see remaCor::LS() details fixed effect test.  1 feature selected, original p-value returned test statistic set NA. \"RE2C\" test, final test statistic sum test statistic mean effect (stat.FE) heterogeneity across effects (stat.het).  mvTest() returns 0 stat.het negative extremely rare cases.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate tests on results from dream() — mvTest","text":"","code":"# library(variancePartition) library(edgeR) library(BiocParallel)  data(varPartDEdata)  # normalize RNA-seq counts dge = DGEList(counts = countMatrix) dge = calcNormFactors(dge)  # specify formula with random effect for Individual form <- ~ Disease + (1|Individual)   # compute observation weights vobj = voomWithDreamWeights( dge[1:20,], form, metadata)  # fit dream model  fit = dream( vobj, form, metadata) fit = eBayes(fit)  # Multivariate test of features 1 and 2 mvTest(fit, vobj, 1:2, coef=\"Disease1\") #>       stat       pvalue n_features lambda       method #> 1 7.011637 7.273953e-10          2      0 FE.empirical  # Test multiple sets of features lst = list(a = 1:2, b=3:4) mvTest(fit, vobj, lst, coef=\"Disease1\", BPPARAM=SnowParam(2)) #>   ID     stat       pvalue n_features lambda       method #> 1  a 7.011637 7.653129e-10          2      0 FE.empirical #> 2  b 7.075316 4.740443e-09          2      1 FE.empirical"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate tests on results from dream() — mvTest","title":"Multivariate tests on results from dream() — mvTest","text":"Evaluate multivariate tests results dream() using vcov() compute covariance estimated regression coefficients across multiple responses.  joint test see coefficients jointly different zero performed using meta-analysis methods account covariance.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate tests on results from dream() — mvTest","text":"","code":"mvTest(   fit,   vobj,   features,   coef,   method = c(\"FE\", \"RE2C\", \"tstat\", \"sidak\", \"fisher\") )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate tests on results from dream() — mvTest","text":"fit MArrayLM MArrayLM2 returned dream() vobj matrix EList object returned voom() features indeces names features perform multivariate test coef name coefficient contrast tested method statistical method used perform multivariate test.  See details.  'FE' fixed effect test models covariance coefficients.  'RE2C' random effect test heterogeneity estimated coefficients models covariance coefficients, also incorporates fixed effects test . 'tstat' combines t-statistics models covariance coefficients. 'sidak' returns smallest p-value accounting number tests. 'fisher' combines p-value using Fisher's method assuming independent tests.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate tests on results from dream() — mvTest","text":"See package remaCor details remaCor::RE2C() test, see remaCor::LS() details fixed effect test.  1 feature selected, original p-value returned test statistic set NA. \"RE2C\" test, final test statistic sum test statistic mean effect (stat.FE) heterogeneity across effects (stat.het).","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate tests on results from dream() — mvTest","text":"","code":"# library(variancePartition) library(edgeR) library(BiocParallel)  data(varPartDEdata)  # normalize RNA-seq counts dge = DGEList(counts = countMatrix) dge = calcNormFactors(dge)  # specify formula with random effect for Individual form <- ~ Disease + (1|Individual)   # compute observation weights vobj = voomWithDreamWeights( dge[1:20,], form, metadata) #> Memory usage to store result: >49.7 Kb #> Dividing work into 1 chunks... #>  #> Total:0.2 s  # fit dream model  fit = dream( vobj, form, metadata) #> Dividing work into 1 chunks... #>  #> Total:0.9 s fit = eBayes(fit)  # Multivariate test of features 1 and 2 mvTest(fit, vobj, 1:2, coef=\"Disease1\") #>       stat       pvalue n_features method #> 1 7.011638 2.355445e-12          2     FE"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/mvTest_input-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class mvTest_input — mvTest_input-class","title":"Class mvTest_input — mvTest_input-class","text":"Class mvTest_input work iterRowsSplit()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCompareP-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare p-values from two analyses — plotCompareP","title":"Compare p-values from two analyses — plotCompareP","text":"Plot -log10 p-values two analyses color based donor component variancePartition analysis","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCompareP-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare p-values from two analyses — plotCompareP","text":"","code":"plotCompareP(   p1,   p2,   vpDonor,   dupcorvalue,   fraction = 0.2,   xlabel = bquote(duplicateCorrelation ~ (-log[10] ~ p)),   ylabel = bquote(dream ~ (-log[10] ~ p)) )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCompareP-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare p-values from two analyses — plotCompareP","text":"p1 p-value first analysis p2 p-value second analysis vpDonor donor component gene variancePartition analysis dupcorvalue scalar donor component duplicateCorrelation fraction fraction highest/lowest values use best fit lines xlabel x-axis ylabel label y-axis","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCompareP-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare p-values from two analyses — plotCompareP","text":"ggplot2 plot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCompareP-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare p-values from two analyses — plotCompareP","text":"","code":"# load library # library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Perform very simple analysis for demonstration  # Analysis 1 form <- ~ Batch  fit = dream( geneExpr, form, info) fit = eBayes( fit ) res = topTable( fit, number=Inf, coef=\"Batch3\" )  # Analysis 2 form <- ~ Batch + (1|Tissue) fit2 = dream( geneExpr, form, info) res2 = topTable( fit2, number=Inf, coef=\"Batch3\" )  # Compare p-values plotCompareP( res$P.Value, res2$P.Value, runif(nrow(res)), .3 )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotContrasts.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot representation of contrast matrix — plotContrasts","title":"Plot representation of contrast matrix — plotContrasts","text":"Plot contrast matrix clarify interpretation hypothesis tests linear contrasts","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotContrasts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot representation of contrast matrix — plotContrasts","text":"","code":"plotContrasts(L)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotContrasts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot representation of contrast matrix — plotContrasts","text":"L contrast matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotContrasts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot representation of contrast matrix — plotContrasts","text":"ggplot2 object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotContrasts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot representation of contrast matrix — plotContrasts","text":"plot shows contrasts weights applied coefficient. Consider variable v levels c('', 'B', 'C').  contrast comparing B 'vA - vB' tests whether difference levels different zero. Coded 3 levels weights c(1, -1, 0).  order compare levels, contrast 'vA - (vB + vC)/2' compared average two levels. encoded c(1, -0.5, -0.5).  type proper matching testing multiple levels enforced ensuring contrast weights sum 1. Based standard regression theory weighted sums estimated coefficients supported.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotContrasts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot representation of contrast matrix — plotContrasts","text":"","code":"# load library # library(variancePartition)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # 1) get contrast matrix testing if the coefficient for Batch2 is different from Batch3  form <- ~ Batch + (1|Individual) + (1|Tissue)  L = makeContrastsDream(form, info, contrasts=c(Batch_3_vs_2 = \"Batch3 - Batch2\"))  # plot contrasts plotContrasts( L )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"plotCorrMatrix — plotCorrMatrix","title":"plotCorrMatrix — plotCorrMatrix","text":"Plot correlation matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotCorrMatrix — plotCorrMatrix","text":"","code":"plotCorrMatrix(   C,   dendrogram = \"both\",   sort = TRUE,   margins = c(13, 13),   key.xlab = \"correlation\",   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotCorrMatrix — plotCorrMatrix","text":"C correlation matrix: R R^2 matrix dendrogram character string indicating whether draw '' none' sort sort rows columns based clustering margins spacing plot key.xlab label color gradient ... additional arguments heatmap.2","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotCorrMatrix — plotCorrMatrix","text":"Image correlation matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plotCorrMatrix — plotCorrMatrix","text":"Plots image correlation matrix using customized call heatmap.2","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotCorrMatrix — plotCorrMatrix","text":"","code":"# simulate simple matrix of 10 variables mat = matrix(rnorm(1000), ncol=10)  # compute correlation matrix C = cor(mat)  # plot correlations plotCorrMatrix( C )   # plot squared correlations plotCorrMatrix( C^2, dendrogram=\"none\" )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrStructure.html","id":null,"dir":"Reference","previous_headings":"","what":"plotCorrStructure — plotCorrStructure","title":"plotCorrStructure — plotCorrStructure","text":"Plot correlation structure gene based random effects","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrStructure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotCorrStructure — plotCorrStructure","text":"","code":"plotCorrStructure(   fit,   varNames = names(coef(fit)),   reorder = TRUE,   pal = colorRampPalette(c(\"white\", \"red\", \"darkred\")),   hclust.method = \"complete\" )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrStructure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotCorrStructure — plotCorrStructure","text":"fit linear mixed model fit gene produced lmer() fitVarPartModel() varNames variables metadata correlation structure shown.  Variables must random effects reorder reorder rows/columns correlation matrix.  reorder=FALSE gives reorder.  reorder=TRUE reorders based hclust.  reorder can also array indices reorder samples manually pal color palette hclust.method clustering methods hclust","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrStructure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotCorrStructure — plotCorrStructure","text":"Image correlation structure pair experiments single gene","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotCorrStructure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotCorrStructure — plotCorrStructure","text":"","code":"# load library # library(variancePartition)  library(BiocParallel)  # load simulated data: data(varPartData)  # specify formula form <- ~ Age + (1|Individual) + (1|Tissue)  # fit and return linear mixed models for each gene fitList <- fitVarPartModel( geneExpr[1:10,], form, info )  # Focus on the first gene fit = fitList[[1]]  # plot correlation sturcture based on Individual, reordering samples with hclust plotCorrStructure( fit, \"Individual\" )   # don't reorder plotCorrStructure( fit, \"Individual\", reorder=FALSE )   # plot correlation sturcture based on Tissue, reordering samples with hclust plotCorrStructure( fit, \"Tissue\" )   # don't reorder plotCorrStructure( fit, \"Tissue\", FALSE )   # plot correlation structure based on all random effects # reorder manually by Tissue and Individual idx = order(info$Tissue, info$Individual) plotCorrStructure( fit, reorder=idx )   # plot correlation structure based on all random effects # reorder manually by Individual, then Tissue  idx = order(info$Individual, info$Tissue) plotCorrStructure( fit, reorder=idx )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotPercentBars-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Bar plot of gene fractions — plotPercentBars","title":"Bar plot of gene fractions — plotPercentBars","text":"Bar plot fractions subset genes","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotPercentBars-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bar plot of gene fractions — plotPercentBars","text":"","code":"plotPercentBars(   x,   col = c(ggColorHue(ncol(x) - 1), \"grey85\"),   genes = rownames(x),   width = NULL,   ... )  # S4 method for matrix plotPercentBars(   x,   col = c(ggColorHue(ncol(x) - 1), \"grey85\"),   genes = rownames(x),   width = NULL,   ... )  # S4 method for data.frame plotPercentBars(   x,   col = c(ggColorHue(ncol(x) - 1), \"grey85\"),   genes = rownames(x),   width = NULL,   ... )  # S4 method for varPartResults plotPercentBars(   x,   col = c(ggColorHue(ncol(x) - 1), \"grey85\"),   genes = rownames(x),   width = NULL,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotPercentBars-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bar plot of gene fractions — plotPercentBars","text":"x object storing fractions col color bars variable genes name genes plot width specify width bars ... arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotPercentBars-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bar plot of gene fractions — plotPercentBars","text":"Returns ggplot2 barplot","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotPercentBars-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bar plot of gene fractions — plotPercentBars","text":"","code":"# library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider form <- ~ Age + (1|Individual) + (1|Tissue)  # Fit model varPart <- fitExtractVarPartModel( geneExpr, form, info )  # Bar plot for a subset of genes showing variance fractions plotPercentBars( varPart[1:5,] )   # Move the legend to the top plotPercentBars( varPart[1:5,] ) + theme(legend.position=\"top\")"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratify.html","id":null,"dir":"Reference","previous_headings":"","what":"plotStratify — plotStratify","title":"plotStratify — plotStratify","text":"Plot gene expression stratified another variable","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotStratify — plotStratify","text":"","code":"plotStratify(   formula,   data,   xlab,   ylab,   main,   sortBy,   colorBy,   sort = TRUE,   text = NULL,   text.y = 1,   text.size = 5,   pts.cex = 1,   ylim = NULL,   legend = TRUE,   x.labels = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotStratify — plotStratify","text":"formula specify variables shown x- y-axes.  Y-axis continuous variable, x-axis discrete. data data.frame storing continuous discrete variables specified formula xlab label x-asis. Defaults value xval ylab label y-asis. Defaults value yval main main label sortBy name column geneExpr sort samples .  Defaults xval colorBy name column geneExpr color box plots.  Defaults xval sort TRUE, sort boxplots median value, else use default ordering text plot text top left plot text.y indicate position text y-axis fraction y-axis range text.size size text pts.cex size points ylim specify range y-axis legend show legend x.labels show x axis labels","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotStratify — plotStratify","text":"ggplot2 object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotStratify — plotStratify","text":"","code":"# Note: This is a newer, more convient interface to plotStratifyBy()  # load library # library(variancePartition)  # load simulated data: data(varPartData)  # Create data.frame with expression and Tissue information for each sample GE = data.frame( Expression = geneExpr[1,], Tissue = info$Tissue)  # Plot expression stratified by Tissue plotStratify( Expression ~ Tissue, GE )   # Omit legend and color boxes grey plotStratify( Expression ~ Tissue, GE, colorBy = NULL)   # Specify colors col = c( B=\"green\", A=\"red\", C=\"yellow\") plotStratify( Expression ~ Tissue, GE, colorBy=col, sort=FALSE)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratifyBy.html","id":null,"dir":"Reference","previous_headings":"","what":"plotStratifyBy — plotStratifyBy","title":"plotStratifyBy — plotStratifyBy","text":"Plot gene expression stratified another variable","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratifyBy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plotStratifyBy — plotStratifyBy","text":"","code":"plotStratifyBy(   geneExpr,   xval,   yval,   xlab = xval,   ylab = yval,   main = NULL,   sortBy = xval,   colorBy = xval,   sort = TRUE,   text = NULL,   text.y = 1,   text.size = 5,   pts.cex = 1,   ylim = NULL,   legend = TRUE,   x.labels = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratifyBy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plotStratifyBy — plotStratifyBy","text":"geneExpr data.frame gene expression values another variable sample.  multiple columns, user can specify one use xval name column geneExpr used along x-axis stratify gene expression yval name column geneExpr indicating gene expression xlab label x-asis. Defaults value xval ylab label y-asis. Defaults value yval main main label sortBy name column geneExpr sort samples .  Defaults xval colorBy name column geneExpr color box plots.  Defaults xval sort TRUE, sort boxplots median value, else use default ordering text plot text top left plot text.y indicate position text y-axis fraction y-axis range text.size size text pts.cex size points ylim specify range y-axis legend show legend x.labels show x axis labels","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratifyBy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plotStratifyBy — plotStratifyBy","text":"ggplot2 object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotStratifyBy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plotStratifyBy — plotStratifyBy","text":"","code":"# load library # library(variancePartition)  # load simulated data: data(varPartData)  # Create data.frame with expression and Tissue information for each sample GE = data.frame( Expression = geneExpr[1,], Tissue = info$Tissue)  # Plot expression stratified by Tissue plotStratifyBy( GE, \"Tissue\", \"Expression\")   # Omit legend and color boxes grey plotStratifyBy( GE, \"Tissue\", \"Expression\", colorBy = NULL)   # Specify colors col = c( B=\"green\", A=\"red\", C=\"yellow\") plotStratifyBy( GE, \"Tissue\", \"Expression\", colorBy=col, sort=FALSE)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotVarPart-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Violin plot of variance fractions — plotVarPart","title":"Violin plot of variance fractions — plotVarPart","text":"Violin plot variance fraction gene variable","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotVarPart-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Violin plot of variance fractions — plotVarPart","text":"","code":"plotVarPart(   obj,   col = c(ggColorHue(ncol(obj) - 1), \"grey85\"),   label.angle = 20,   main = \"\",   ylab = \"\",   convertToPercent = TRUE,   ... )  # S4 method for matrix plotVarPart(   obj,   col = c(ggColorHue(ncol(obj) - 1), \"grey85\"),   label.angle = 20,   main = \"\",   ylab = \"\",   convertToPercent = TRUE,   ... )  # S4 method for data.frame plotVarPart(   obj,   col = c(ggColorHue(ncol(obj) - 1), \"grey85\"),   label.angle = 20,   main = \"\",   ylab = \"\",   convertToPercent = TRUE,   ... )  # S4 method for varPartResults plotVarPart(   obj,   col = c(ggColorHue(ncol(obj) - 1), \"grey85\"),   label.angle = 20,   main = \"\",   ylab = \"\",   convertToPercent = TRUE,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotVarPart-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Violin plot of variance fractions — plotVarPart","text":"obj varParFrac object returned fitExtractVarPart extractVarPart col vector colors label.angle angle labels x-axis main title plot ylab text y-axis convertToPercent multiply fractions 100 convert percent values ... additional arguments","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotVarPart-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Violin plot of variance fractions — plotVarPart","text":"Makes violin plots variance components model.  function uses graphics interface ggplot2.  Warnings produced function usually ggplot2 warning window small.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotVarPart-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Violin plot of variance fractions — plotVarPart","text":"","code":"# load library # library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   varPart <- fitExtractVarPartModel( geneExpr, form, info )   # violin plot of contribution of each variable to total variance plotVarPart( sortCols( varPart ) )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotVarianceEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Variance Estimates — plotVarianceEstimates","title":"Plot Variance Estimates — plotVarianceEstimates","text":"Plot Variance Estimates","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotVarianceEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Variance Estimates — plotVarianceEstimates","text":"","code":"plotVarianceEstimates(   fit,   fitEB,   var_true = NULL,   xmax = quantile(fit$sigma^2, 0.999) )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/plotVarianceEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Variance Estimates — plotVarianceEstimates","text":"fit model fit dream() fitEB model fit eBayes() var_true array true variance values simulation (optional) xmax maximum value x-axis","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf.merMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Approximate residual degrees of freedom — rdf.merMod","title":"Approximate residual degrees of freedom — rdf.merMod","text":"linear model \\(n\\) samples \\(p\\) covariates, \\(RSS/\\sigma^2 \\sim \\chi^2_{\\nu}\\) \\(\\nu = n-p\\) residual degrees freedom.  case linear mixed model, distribution longer exactly chi-square distribution, can approximated chi-square distribution. Given hat matrix, \\(H\\), maps observed fitted responses, approximate residual degrees freedom \\(\\nu = tr((-H)^T(-H))\\).  linear model, simplifies well known form \\(\\nu = n - p\\). general case, linear mixed model, original form simplifies \\(n - 2tr(H) + tr(HH)\\) approximation rather exact.  third term quadratic time number samples, \\(n\\), can computationally expensive evaluate larger datasets.  develop linear time algorithm takes advantage fact \\(H\\) low rank. \\(H\\) computed \\(^TA + B^TB\\) =CL B=CR defined code.  Since \\(\\) \\(B\\) low rank, need compute \\(H\\) directly.  Instead, terms \\(tr(H)\\) \\(tr(HH)\\) can computed using eigen decompositions \\(AA^T\\) \\(BB^T\\) linear time number samples.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf.merMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Approximate residual degrees of freedom — rdf.merMod","text":"","code":"rdf.merMod(model, method = c(\"linear\", \"quadratic\"))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf.merMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Approximate residual degrees of freedom — rdf.merMod","text":"model object class merMod method Use algorithm \"linear\" (default) quadratic time number samples","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf.merMod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Approximate residual degrees of freedom — rdf.merMod","text":"residual degrees freedom","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf.merMod.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Approximate residual degrees of freedom — rdf.merMod","text":"Compute approximate residual degrees freedom linear mixed model.","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf.merMod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Approximate residual degrees of freedom — rdf.merMod","text":"","code":"library(lme4)  # Fit linear mixed model fit <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)  # Evaluate the approximate residual degrees of freedom rdf.merMod(fit) #> [1] 146.3644"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf_from_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast approximate residual degrees of freedom — rdf_from_matrices","title":"Fast approximate residual degrees of freedom — rdf_from_matrices","text":"Defining \\(H = ^TA + B^TB\\) \\(\\) \\(B\\) low rank, compute  \\(n - 2tr(H) + tr(HH)\\) \\(O(np^2)\\) instead \\(O(n^2p^2)\\).","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf_from_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast approximate residual degrees of freedom — rdf_from_matrices","text":"","code":"rdf_from_matrices(A, B)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/rdf_from_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast approximate residual degrees of freedom — rdf_from_matrices","text":"matrix sparseMatrix B matrix sparseMatrix","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/reOnly.html","id":null,"dir":"Reference","previous_headings":"","what":"Adapted from lme4:::reOnly — reOnly","title":"Adapted from lme4:::reOnly — reOnly","text":"Adapted lme4:::reOnly","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/reOnly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adapted from lme4:::reOnly — reOnly","text":"","code":"reOnly(f, response = FALSE)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/reOnly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adapted from lme4:::reOnly — reOnly","text":"f formula response (FALSE) response formula","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-MArrayLM-method.html","id":null,"dir":"Reference","previous_headings":"","what":"residuals for MArrayLM — residuals,MArrayLM-method","title":"residuals for MArrayLM — residuals,MArrayLM-method","text":"residuals MArrayLM","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-MArrayLM-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"residuals for MArrayLM — residuals,MArrayLM-method","text":"","code":"# S4 method for MArrayLM residuals(object, y, ..., type = c(\"response\", \"pearson\"))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-MArrayLM-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"residuals for MArrayLM — residuals,MArrayLM-method","text":"object MArrayLM object dream y EList object used dream() ... arguments, currently ignored type compute either response pearson residuals","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-MArrayLM-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"residuals for MArrayLM — residuals,MArrayLM-method","text":"results residuals","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-MArrayLM2-method.html","id":null,"dir":"Reference","previous_headings":"","what":"residuals for MArrayLM2 — residuals,MArrayLM2-method","title":"residuals for MArrayLM2 — residuals,MArrayLM2-method","text":"residuals MArrayLM2","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-MArrayLM2-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"residuals for MArrayLM2 — residuals,MArrayLM2-method","text":"","code":"# S4 method for MArrayLM2 residuals(object, y, type = c(\"response\", \"pearson\"), ...)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-MArrayLM2-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"residuals for MArrayLM2 — residuals,MArrayLM2-method","text":"object MArrayLM2 object dream y EList object used dream() type compute either response pearson residuals ... arguments, currently ignored","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-MArrayLM2-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"residuals for MArrayLM2 — residuals,MArrayLM2-method","text":"results residuals","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-VarParFitList-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Residuals from model fit — residuals,VarParFitList-method","title":"Residuals from model fit — residuals,VarParFitList-method","text":"Extract residuals gene model fit fitVarPartModel()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-VarParFitList-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residuals from model fit — residuals,VarParFitList-method","text":"","code":"# S4 method for VarParFitList residuals(object, ...)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-VarParFitList-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residuals from model fit — residuals,VarParFitList-method","text":"object object produced fitVarPartModel() ... arguments.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-VarParFitList-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residuals from model fit — residuals,VarParFitList-method","text":"Residuals extracted model fits stored object","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-VarParFitList-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Residuals from model fit — residuals,VarParFitList-method","text":"model fit missing data, residuals returns NA entries  missing original data","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals-VarParFitList-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residuals from model fit — residuals,VarParFitList-method","text":"","code":"# load library # library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   # Fit model modelFit <- fitVarPartModel( geneExpr, form, info )  # Extract residuals of model fit res <- residuals( modelFit )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals.MArrayLM2.html","id":null,"dir":"Reference","previous_headings":"","what":"Residuals for result of dream — residuals.MArrayLM2","title":"Residuals for result of dream — residuals.MArrayLM2","text":"Residuals result dream","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals.MArrayLM2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residuals for result of dream — residuals.MArrayLM2","text":"","code":"residuals.MArrayLM2(object, y, ..., type = c(\"response\", \"pearson\"))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/residuals.MArrayLM2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residuals for result of dream — residuals.MArrayLM2","text":"object See ?stats::residuals y EList object used dream() ... See ?stats::residuals type compute either response pearson residuals","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/shrinkageMetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Shrinkage metric for eBayes — shrinkageMetric","title":"Shrinkage metric for eBayes — shrinkageMetric","text":"Evaluates coefficient linear regression s2.post ~ sigmaSq. shrinkage, value 1.  Values less 1 indicate amount shrinkage.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/shrinkageMetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shrinkage metric for eBayes — shrinkageMetric","text":"","code":"shrinkageMetric(sigmaSq, s2.post)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/shrinkageMetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shrinkage metric for eBayes — shrinkageMetric","text":"sigmaSq maximum likelihood residual variance every gene s2.post empirical Bayes posterior estimate residual variance every gene","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/shrinkageMetric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shrinkage metric for eBayes — shrinkageMetric","text":"Shrinkage metric eBayes quantifying amount shrinkage applied shrink maximum likelihood residual variance empirical Bayes posterior estimate","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/sortCols-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort variance partition statistics — sortCols","title":"Sort variance partition statistics — sortCols","text":"Sort columns returned extractVarPart() fitExtractVarPartModel()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/sortCols-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort variance partition statistics — sortCols","text":"","code":"sortCols(   x,   FUN = median,   decreasing = TRUE,   last = c(\"Residuals\", \"Measurement.error\"),   ... )  # S4 method for matrix sortCols(   x,   FUN = median,   decreasing = TRUE,   last = c(\"Residuals\", \"Measurement.error\"),   ... )  # S4 method for data.frame sortCols(   x,   FUN = median,   decreasing = TRUE,   last = c(\"Residuals\", \"Measurement.error\"),   ... )  # S4 method for varPartResults sortCols(   x,   FUN = median,   decreasing = TRUE,   last = c(\"Residuals\", \"Measurement.error\"),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/sortCols-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort variance partition statistics — sortCols","text":"x object returned extractVarPart() fitExtractVarPartModel() FUN function giving summary statistic sort .  Defaults median decreasing logical.  sorting increasing decreasing? last columns placed right, regardless values columns ... arguments sort","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/sortCols-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort variance partition statistics — sortCols","text":"data.frame columns sorted mean value, Residuals last column","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/sortCols-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort variance partition statistics — sortCols","text":"","code":"# library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   # Step 1: fit linear mixed model on gene expression # If categorical variables are specified, a linear mixed model is used # If all variables are modeled as continuous, a linear model is used # each entry in results is a regression model fit on a single gene # Step 2: extract variance fractions from each model fit # for each gene, returns fraction of variation attributable to each variable  # Interpretation: the variance explained by each variable # after correction for all other variables varPart <- fitExtractVarPartModel( geneExpr, form, info )   # violin plot of contribution of each variable to total variance # sort columns by median value plotVarPart( sortCols( varPart ) )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/subset.MArrayLM2-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Subseting for MArrayLM2 — [.MArrayLM2","title":"Subseting for MArrayLM2 — [.MArrayLM2","text":"Enable subsetting MArrayLM2 object. MArrayLM, apply column subsetting df.residual cov.coefficients.list","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/subset.MArrayLM2-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subseting for MArrayLM2 — [.MArrayLM2","text":"object MArrayLM2 row j col","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/subset.MArrayLM2-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subseting for MArrayLM2 — [.MArrayLM2","text":"subset","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/toptable-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Top Genes from Linear Model Fit — topTable","title":"Table of Top Genes from Linear Model Fit — topTable","text":"topTable generic topTable generic MArrayLM topTable generic MArrayLM2","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/toptable-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Top Genes from Linear Model Fit — topTable","text":"","code":"topTable(   fit,   coef = NULL,   number = 10,   genelist = fit$genes,   adjust.method = \"BH\",   sort.by = \"B\",   resort.by = NULL,   p.value = 1,   lfc = 0,   confint = FALSE )  # S4 method for MArrayLM topTable(   fit,   coef = NULL,   number = 10,   genelist = fit$genes,   adjust.method = \"BH\",   sort.by = \"p\",   resort.by = NULL,   p.value = 1,   lfc = 0,   confint = FALSE )  # S4 method for MArrayLM2 topTable(   fit,   coef = NULL,   number = 10,   genelist = fit$genes,   adjust.method = \"BH\",   sort.by = \"p\",   resort.by = NULL,   p.value = 1,   lfc = 0,   confint = FALSE )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/toptable-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table of Top Genes from Linear Model Fit — topTable","text":"fit fit coef coef number number genelist genelist adjust.method adjust.method sort.sort.resort.resort.p.value p.value lfc lfc confint confint","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/toptable-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Table of Top Genes from Linear Model Fit — topTable","text":"results toptable results toptable results toptable","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varParFrac-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class varParFrac — varParFrac-class","title":"Class varParFrac — varParFrac-class","text":"Class varParFrac","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartConfInf.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear mixed model confidence intervals — varPartConfInf","title":"Linear mixed model confidence intervals — varPartConfInf","text":"Fit linear mixed model estimate contribution multiple sources variation simultaneously correcting variables. perform parametric bootstrap sampling get 95% confidence intervals variable gene.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartConfInf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear mixed model confidence intervals — varPartConfInf","text":"","code":"varPartConfInf(   exprObj,   formula,   data,   REML = FALSE,   useWeights = TRUE,   control = vpcontrol,   nsim = 1000,   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartConfInf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear mixed model confidence intervals — varPartConfInf","text":"exprObj matrix expression data (g genes x n samples), ExpressionSet, EList returned voom() limma package formula specifies variables linear (mixed) model.  Must specify covariates, since rows exprObj automatically used response. e.g.: ~ + b + (1|c) data data.frame columns corresponding formula REML use restricted maximum likelihood fit linear mixed model. default FALSE.  Strongly discourage changing option, compatibility. useWeights TRUE, analysis uses heteroskedastic error estimates voom().  Value ignored unless exprObj EList voom() weightsMatrix specified control control settings lmer() nsim number bootstrap datasets ... Additional arguments lmer() lm()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartConfInf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear mixed model confidence intervals — varPartConfInf","text":"list() entry result gene.  entry matrix 95% confidence interval variance fraction variable","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartConfInf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear mixed model confidence intervals — varPartConfInf","text":"linear mixed model fit gene, bootMer() used generate parametric bootstrap confidence intervals.  use.u=TRUE used \\(\\hat{u}\\) values random effects used estimated re-sampled.  gives confidence intervals additional data generated current samples.  Conversely, use.u=FALSE assumes  dataset sample larger population.   Thus simulates \\(\\hat{u}\\) based estimated variance parameter.  approach gives confidence intervals additional data collected larger population dataset sampled.  Overall, use.u=TRUE gives smaller confidence intervals appropriate case.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartConfInf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear mixed model confidence intervals — varPartConfInf","text":"","code":"# load library # library(variancePartition)  library(BiocParallel)  # load simulated data: # geneExpr: matrix of gene expression values # info: information/metadata about each sample data(varPartData)  # Specify variables to consider # Age is continuous so we model it as a fixed effect # Individual and Tissue are both categorical, so we model them as random effects form <- ~ Age + (1|Individual) + (1|Tissue)   # Compute bootstrap confidence intervals for each variable for each gene resCI <- varPartConfInf( geneExpr[1:5,], form, info, nsim=100 ) #> Warning: Model failed for 1 responses. #>   See errors with attr(., 'errors')"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartDEdata.html","id":null,"dir":"Reference","previous_headings":"","what":"A simulated dataset of gene counts — varPartDEdata","title":"A simulated dataset of gene counts — varPartDEdata","text":"geneCounts gene expression form RNA-seq counts geneExpr gene expression continuous scale info metadata study design geneCounts gene expression form RNA-seq counts geneExpr gene expression continuous scale info metadata study design","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartDEdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A simulated dataset of gene counts — varPartDEdata","text":"","code":"data(varPartData)  data(varPartData)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartDEdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A simulated dataset of gene counts — varPartDEdata","text":"dataset 24 samples 19,364 genes dataset 24 samples 19,364 genes","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartData.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation dataset for examples — varPartData","title":"Simulation dataset for examples — varPartData","text":"simulated dataset gene expression metadata simulated dataset gene counts simulated dataset gene counts simulated dataset gene counts","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation dataset for examples — varPartData","text":"","code":"data(varPartData)  data(varPartData)  data(varPartData)  data(varPartData)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulation dataset for examples — varPartData","text":"dataset 100 samples 200 genes dataset 100 samples 200 genes dataset 100 samples 200 genes dataset 100 samples 200 genes","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulation dataset for examples — varPartData","text":"geneCounts gene expression form RNA-seq counts geneExpr gene expression continuous scale info metadata study design geneCounts gene expression form RNA-seq counts geneExpr gene expression continuous scale info metadata study design geneCounts gene expression form RNA-seq counts geneExpr gene expression continuous scale info metadata study design geneCounts gene expression form RNA-seq counts geneExpr gene expression continuous scale info metadata study design","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/varPartResults-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class varPartResults — varPartResults-class","title":"Class varPartResults — varPartResults-class","text":"Class varPartResults","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcov-MArrayLM-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Co-variance matrix for dream() fit — vcov,MArrayLM-method","title":"Co-variance matrix for dream() fit — vcov,MArrayLM-method","text":"Define generic vcov() result lmFit() dream()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcov-MArrayLM-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Co-variance matrix for dream() fit — vcov,MArrayLM-method","text":"","code":"# S4 method for MArrayLM vcov(object, vobj, coef)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcov-MArrayLM-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Co-variance matrix for dream() fit — vcov,MArrayLM-method","text":"object MArrayLM object return lmFit() dream() vobj EList object returned voom() coef name coefficient extracted","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcov-MArrayLM-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Co-variance matrix for dream() fit — vcov,MArrayLM-method","text":"variance-covariance matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcov-MArrayLM2-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Co-variance matrix for dream() fit — vcov,MArrayLM2-method","title":"Co-variance matrix for dream() fit — vcov,MArrayLM2-method","text":"Define generic vcov() result lmFit() dream()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcov-MArrayLM2-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Co-variance matrix for dream() fit — vcov,MArrayLM2-method","text":"","code":"# S4 method for MArrayLM2 vcov(object, vobj, coef)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcov-MArrayLM2-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Co-variance matrix for dream() fit — vcov,MArrayLM2-method","text":"object MArrayLM object return lmFit() dream() vobj EList object returned voom() coef name coefficient extracted","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcov-MArrayLM2-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Co-variance matrix for dream() fit — vcov,MArrayLM2-method","text":"variance-covariance matrix","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcovSqrt-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Sqrt of co-variance matrix for dream() fit — vcovSqrt","title":"Sqrt of co-variance matrix for dream() fit — vcovSqrt","text":"Define generic vcovSqrt() result lmFit() dream()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcovSqrt-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sqrt of co-variance matrix for dream() fit — vcovSqrt","text":"","code":"vcovSqrt(object, vobj, coef, approx = TRUE)  # S4 method for MArrayLM vcovSqrt(object, vobj, coef, approx = TRUE)  # S4 method for MArrayLM2 vcovSqrt(object, vobj, coef, approx = TRUE)"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcovSqrt-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sqrt of co-variance matrix for dream() fit — vcovSqrt","text":"object MArrayLM object return lmFit() dream() vobj EList object returned voom() coef name coefficient extracted approx use fast approximation","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcovSqrt-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sqrt of co-variance matrix for dream() fit — vcovSqrt","text":"Computes factor covariance matrix vcov(object) crossprod(vcovSqrt(object))","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/vcovSqrt-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sqrt of co-variance matrix for dream() fit — vcovSqrt","text":"","code":"# load simulated data: # geneExpr: matrix of *normalized* gene expression values # info: information/metadata about each sample data(varPartData)  form <- ~ Batch   fit = dream( geneExpr[1:2,], form, info) fit = eBayes(fit)  # Compute covariance directly Sigma = vcov(fit, geneExpr[1:2,])  # Compute factor of covariance S = crossprod(vcovSqrt(fit, geneExpr[1:2,]))"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/voomWithDreamWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform RNA-Seq Data Ready for Linear Mixed Modelling with dream() — voomWithDreamWeights","title":"Transform RNA-Seq Data Ready for Linear Mixed Modelling with dream() — voomWithDreamWeights","text":"Transform count data log2-counts per million (logCPM), estimate mean-variance relationship use compute appropriate observation-level weights. data ready linear mixed modelling dream().   method limma::voom(), except allows random effects formula","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/voomWithDreamWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform RNA-Seq Data Ready for Linear Mixed Modelling with dream() — voomWithDreamWeights","text":"","code":"voomWithDreamWeights(   counts,   formula,   data,   lib.size = NULL,   normalize.method = \"none\",   span = 0.5,   weights = NULL,   plot = FALSE,   save.plot = FALSE,   BPPARAM = SerialParam(),   ... )"},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/voomWithDreamWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform RNA-Seq Data Ready for Linear Mixed Modelling with dream() — voomWithDreamWeights","text":"counts numeric matrix containing raw counts, ExpressionSet containing raw counts, DGEList object. Counts must non-negative NAs permitted. formula specifies variables linear (mixed) model.  Must specify covariates, since rows exprObj automatically used response. e.g.: ~ + b + (1|c)  Formulas fixed effects also work, lmFit() followed contrasts.fit() run. data data.frame columns corresponding formula lib.size numeric vector containing total library sizes sample.  Defaults normalized (effective) library sizes counts counts DGEList columnwise count totals counts matrix. normalize.method microarray-style normalization method applied logCPM values ().  Choices method argument normalizeBetweenArrays data single-channel.  normalization factors found counts still used even normalize.method=\"none\". span width lowess smoothing window proportion. weights Can numeric matrix individual weights dimensions counts, numeric vector sample weights length equal ncol(counts) plot logical, plot mean-variance trend displayed? save.plot logical, coordinates line plot saved output? BPPARAM parameters parallel evaluation ... arguments passed lmer.","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/voomWithDreamWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform RNA-Seq Data Ready for Linear Mixed Modelling with dream() — voomWithDreamWeights","text":"EList object just like result limma::voom()","code":""},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/voomWithDreamWeights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform RNA-Seq Data Ready for Linear Mixed Modelling with dream() — voomWithDreamWeights","text":"Adapted voom() limma v3.40.2","code":""},{"path":[]},{"path":"http://DiseaseNeurogenomics.github.io/variancePartition/reference/voomWithDreamWeights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform RNA-Seq Data Ready for Linear Mixed Modelling with dream() — voomWithDreamWeights","text":"","code":"# library(variancePartition) library(edgeR) library(BiocParallel)  data(varPartDEdata)  # normalize RNA-seq counts dge = DGEList(counts = countMatrix) dge = calcNormFactors(dge)  # specify formula with random effect for Individual form <- ~ Disease + (1|Individual)   # compute observation weights vobj = voomWithDreamWeights( dge[1:20,], form, metadata)  # fit dream model  res = dream( vobj, form, metadata) res = eBayes(res)  # extract results topTable(res, coef=\"Disease1\", number=3) #>                                    logFC  AveExpr        t      P.Value #> ENST00000456159.1 gene=MET     1.0182945 2.458926 6.278452 6.584755e-07 #> ENST00000418210.2 gene=TMEM64  1.0375652 4.715367 6.484243 2.815718e-06 #> ENST00000555834.1 gene=RPS6KL1 0.9355651 5.272063 5.685992 3.431917e-06 #>                                   adj.P.Val        B    z.std #> ENST00000456159.1 gene=MET     1.316951e-05 5.928918 4.973227 #> ENST00000418210.2 gene=TMEM64  2.287945e-05 5.952631 4.683824 #> ENST00000555834.1 gene=RPS6KL1 2.287945e-05 4.307472 4.643117"}]
