% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mvTest.R
\name{mvTest}
\alias{mvTest}
\title{Multivariate tests on results from \code{dream()}}
\usage{
mvTest(
  fit,
  vobj,
  features,
  coef,
  method = c("RE2C", "LS", "tstat", "sidak", "fisher")
)
}
\arguments{
\item{fit}{\code{MArrayLM} or \code{MArrayLM2} returned by \code{dream()}}

\item{vobj}{matrix or \code{EList} object returned by \code{voom()}}

\item{features}{indeces or names of features to perform multivariate test on}

\item{coef}{name of coefficient or contrast to be tested}

\item{method}{statistical method used to perform multivariate test.  See details. \code{'RE2C'} is a random effect test of heterogeneity of the estimated coefficients that models the covariance between coefficients, and also incorporates a fixed effects test too. \code{'LS'} is a fixed effect test that models the covariance between coefficients.  \code{'tstat'} combines the t-statistics and models the covariance between coefficients. \code{'sidak'} returns the smallest p-value and accounting for the number of tests. \code{'fisher'} combines the p-value using Fisher's method assuming independent tests.}
}
\description{
Evaluate multivariate tests on results from \code{dream()} using \code{vcov()} to compute the covariance between estimated regression coefficients across multiple responses.  A joint test to see if the coefficients are jointly different from zero is performed using meta-analysis methods that account for the covariance.
}
\details{
See package \code{remaCor} for details about \code{remaCor::RE2C()} and \code{remaCor::LS()} methods.  When only 1 feature is selected, the original t-statistic and p-value are returned.
}
\examples{
# library(variancePartition)
library(edgeR)
library(BiocParallel)

data(varPartDEdata)

# normalize RNA-seq counts
dge = DGEList(counts = countMatrix)
dge = calcNormFactors(dge)

# specify formula with random effect for Individual
form <- ~ Disease + (1|Individual) 

# compute observation weights
vobj = voomWithDreamWeights( dge[1:20,], form, metadata)

# fit dream model 
fit = dream( vobj, form, metadata)
fit = eBayes(fit)

# Multivariate test of features 1 and 2
mvTest(fit, vobj, 1:2, coef="Disease1")

}
